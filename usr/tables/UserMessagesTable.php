<?phpclass UserMessagesTable extends Table{	protected $table	= 'user_messages';	protected $tableHolders	= array(		'[[user]]'	=> 'users',	);	protected $fields	= array(		'id'					=> 'id',		'fk_reply_id'			=> 'fk_reply_id',		'fk_from_user_id'		=> 'fk_from_user_id',		'fk_to_user_id'			=> 'fk_to_user_id',		'subject'				=> 'subject',		'message'				=> 'message',		'is_answered'			=> 'is_answered',		'is_read'				=> 'is_read',		'is_received_archived'	=> 'is_received_archived',		'is_received_trashed'	=> 'is_received_trashed',		'is_received_deleted'	=> 'is_received_deleted',		'is_send_deleted'		=> 'is_send_deleted',		'can_reply'				=> 'can_reply',		'read_count'			=> 'read_count',		'first_read'			=> 'first_read',		'created'				=> 'created',		'from_username'			=> '(SELECT `username` FROM [[user]] WHERE [[user]].`id`=[[this]].`fk_from_user_id`)',		'to_username'			=> '(SELECT `username` FROM [[user]] WHERE [[user]].`id`=[[this]].`fk_to_user_id`)',	);	/* ************************************  S E N D   M E S S A G E S  ************************************/	public function send($from_user_id, $to_user_id, $subject, $message, $can_reply = 1)	{		$fields	= array(			'fk_from_user_id'	=> $from_user_id,			'fk_to_user_id'		=> $to_user_id,			'subject'			=> $subject,			'message'			=> $message,			'can_reply'			=> $can_reply,		);		return $this->_add($fields);	}	public function reply($from_user_id, $to_user_id, $reply_message_id, $subject, $message)	{		// reply to the message		$fields	= array(			'fk_from_user_id'	=> $from_user_id,			'fk_to_user_id'		=> $to_user_id,			'fk_reply_id'		=> $reply_message_id,			'subject'			=> $subject,			'message'			=> $message,			'can_reply'			=> 1,		);		$new_msg_id = $this->_add($fields);		// set my message as replied|answered		$this->_markMyMessageAsAnswered($reply_message_id);		return $new_msg_id;	}	/* ************************************  G E T   M E S S A G E S  ************************************/	public function getMyInboxMessages($my_user_id)	{		$where = sprintf("			`fk_to_user_id` = %d AND			`is_received_archived` = 0 AND			`is_received_trashed` = 0 AND			`is_received_deleted` = 0",			$my_user_id		);		return $this->_get(NULL, $where, NULL, $order = array('created' => 'DESC'));	}	public function getMyOutboxMessages($my_user_id)	{		$where = sprintf("			`fk_from_user_id` = %d AND			`is_send_deleted` = 0",			$my_user_id		);		return $this->_get(NULL, $where, NULL, $order = array('created' => 'DESC'));	}	public function getMyArchiveMessages($my_user_id)	{		$where = sprintf("			`fk_to_user_id` = %d AND			`is_received_archived` = 1 AND			`is_received_trashed` = 0 AND			`is_received_deleted` = 0",			$my_user_id		);		return $this->_get(NULL, $where, NULL, $order = array('created' => 'DESC'));	}	public function getMyTrashMessages($my_user_id)	{		$where = sprintf("			`fk_to_user_id` = %d AND			`is_received_trashed` = 1 AND			`is_received_deleted` = 0",			$my_user_id		);		return $this->_get(NULL, $where, NULL, $order = array('created' => 'DESC'));	}	/* ************************************  C O U N T   F U N C T I O N S  ************************************/	public function countMyUnreadInboxMessages($my_user_id)	{		$where = sprintf("			`fk_to_user_id` = %d AND			`is_read` = 0 AND			`is_received_archived` = 0 AND			`is_received_trashed` = 0 AND			`is_received_deleted` = 0",			$my_user_id		);		return $this->_count($where);	}	public function countMyInboxMessages($my_user_id)	{		$where = sprintf("			`fk_to_user_id` = %d AND			`is_received_archived` = 0 AND			`is_received_trashed` = 0 AND			`is_received_deleted` = 0",			$my_user_id		);		return $this->_count($where);	}	public function countMyArchiveMessages($my_user_id)	{		$where = sprintf("			`fk_to_user_id` = %d AND			`is_received_archived` = 1 AND			`is_received_trashed` = 0 AND			`is_received_deleted` = 0",			$my_user_id		);		return $this->_count($where);	}	public function countMyTrashMessages($my_user_id)	{		$where = sprintf("			`fk_to_user_id` = %d AND			`is_received_trashed` = 1 AND			`is_received_deleted` = 0",			$my_user_id		);		return $this->_count($where);	}	public function countMyOutboxMessages($my_user_id)	{		$where = sprintf("			`fk_from_user_id` = %d AND			`is_send_deleted` = 0",			$my_user_id		);		return $this->_count($where);	}	/* ************************************  C H E C K   F U N C T I O N S  ************************************/	// generic (can be in inbox, archive or trash, but not in outbox)	public function isMyReceivedMessage($my_user_id, $message_id)	{		$where = sprintf("			`id` = %d AND			`fk_to_user_id` = %d AND			`is_received_deleted` = 0",			$message_id,			$my_user_id		);		return $this->_count($where);	}	// specific (rather use them)	public function isMyInboxMessage($my_user_id, $message_id)	{		$where = sprintf("			`id` = %d AND			`fk_to_user_id` = %d AND			`is_received_archived` = 0 AND			`is_received_trashed` = 0 AND			`is_received_deleted` = 0",			$message_id,			$my_user_id);		return $this->_count($where);	}	public function isMyOutboxMessage($my_user_id, $message_id)	{		$where = sprintf("			`id` = %d AND			`fk_from_user_id` = %d AND			`is_send_deleted` = 0",			$message_id,			$my_user_id		);		return $this->_count($where);	}	public function isMyArchiveMessage($my_user_id, $message_id)	{		$where = sprintf("			`id` = %d AND			`fk_to_user_id` = %d AND			`is_received_archived` = 1 AND			`is_received_trashed` = 0 AND			`is_received_deleted` = 0",			$message_id,			$my_user_id		);		return $this->_count($where);	}	public function isMyTrashMessage($my_user_id, $message_id)	{		$where = sprintf("			`id` = %d AND			`fk_to_user_id` = %d AND			`is_received_trashed` = 1 AND			`is_received_deleted` = 0",			$message_id,			$my_user_id		);		return $this->_count($where);	}	/* ************************************  R E A D / U N R E A D   F U N C T I O N S  ************************************/	public function marMessageRead($message_id)	{		$this->_updateField($message_id, 'is_read', 1);		// If the message has not been read once yet,		// it will be read for the first time,		// so we set the 'read_first' date here		if ( !$this->_hasAlreadyBeenReadOnce($message_id) )		{			$this->_updateField($message_id, 'first_read', date('Y-m-d H:i:s', time()));		}	}	public function marMessageUnread($message_id)	{		$this->_updateField($message_id, 'is_read', 0);	}	/* ************************************  M O V E   F U N C T I O N S  ************************************/	// generic	public function moveMessageToTrash($message_id)	{		$this->_updateRow($message_id, array('is_received_trashed' => 0));	}	// Specific (rather use them)	public function moveMyInboxMessageToArchive($message_id)	{		$this->_updateRow($message_id, array('is_received_archived' => 1));	}	public function moveMyInboxMessageToTrash($message_id)	{		$this->_updateRow($message_id, array('is_received_trashed' => 1));	}	public function moveMyArchiveMessageToTrash($message_id)	{		$this->_updateRow($message_id, array('is_received_trashed' => 1));	}	public function restoreMyMessageFromTrash($message_id)	{		$this->_updateRow($message_id, array('is_received_trashed' => 0));	}	/* ************************************  D E L E T E   F U N C T I O N S  ************************************/	public function markMyReceivedMessageDeleted($message_id)	{		$this->_updateRow($message_id, array('is_received_deleted' => 1));	}	public function markMySendMessageDeleted($message_id)	{		$this->_updateRow($message_id, array('is_send_deleted' => 1));	}	/* ************************************  P R I V A T E   F U N C T I O N S  ************************************/	/**	 *	 * Check if the 'first_read' date is < than the 'created' date	 * If so, the 'first_read' has not been set yet	 */	private function _hasAlreadyBeenReadOnce($message_id)	{		return !( strtotime($this->getField($message_id, 'first_read')) < strtotime($this->getField($message_id, 'created')) );	}	private function _markMyMessageAsAnswered($message_id)	{		$this->_updateField($message_id, 'is_answered', 1);	}}?>