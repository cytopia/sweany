<?php/**
 * Sweany MVC PHP framework
 * Copyright (C) 2011-2012 Patu.
 *
 * Sweany is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Sweaby is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Sweany. If not, see <http://www.gnu.org/licenses/>.
 *
 * @copyright	Copyright 2011-2012, Patu
 * @link		none yet
 * @package		sweany.core
 * @author		Patu <pantu39@gmail.com>
 * @license		GPL 2 http://www.gnu.org/licenses/gpl-2.0.html
 * @version		0.7 2012-07-29 13:25 * * basic functions *//** * print_r improvement for html */function debug($arr){	echo '<pre>';	print_r($arr);	echo '</pre>';}/** * @Deprecated * TODO remove wrapper function * returns microtime in miliseconds */function getmicrotime()
{	return microtime(true);	/**	 *
	list($usec, $sec) = explode(' ',microtime());
	return ((float)$usec + (float)$sec);	*/
}/** * Custom ob error handler * * When in debugging mode, ob_start will use * this function as a callback to be able * to display errors during output buffering. * * (In production mode it will use a compression func) */function ob_error_handler($str){	$error = error_get_last();	// If error orrocured	if ($error)	{		return ini_get('error_prepend_string').					"\n".'Fatal error: '.$error['message'].' in '.$error['file'].' on line '.$error['line']."\n".					ini_get('error_append_string');	}	return $str;}/** * Custom PHP Error handler * * Allows a nicer screen output for errors. * This function is called internally by php. */function custom_php_error_handler($errno, $error, $file, $line, $context){	switch ($errno)	{		case E_USER_ERROR:			echo '<div style="z-index:555;font-size:11px;font-family:arial;border:solid 1px red;padding:5px;background:gray">';			echo	'<span style="color:red; font-weight:bold;">Fatal Error ['.$errno.']</span>: <strong>'.$error.'</strong><br/><br/>';			echo	'<strong>File:</strong> '.$file.'<br/>';			echo	'<strong>Line:</strong> '.$line.'<br/>';			echo	'<strong>Context:</strong> '.$context.'<br/>';			echo	'<strong>PHP:<strong> ' . PHP_VERSION . ' (' . PHP_OS . ')<br/><br/>';			echo	'EXIT...<br/>';			echo '</div>';			exit(1);			break;		case E_USER_WARNING:			echo '<div style="z-index:555;font-size:11px; font-family:arial;border:solid 1px #FFA500;padding:5px;background:gray">';			echo	'<span style="color:#FFA500; font-weight:bold;">Warning ['.$errno.']</span>: <strong>'.$error.'</strong><br/><br/>';			echo	'<strong>File:</strong> '.$file.'<br/>';			echo	'<strong>Line:</strong> '.$line.'<br/>';			echo	'<strong>Context:</strong> '.$context.'<br/>';			echo '</div>';			break;		case E_USER_NOTICE:			echo '<div style="z-index:555;font-size:11px; font-family:arial;border:solid 1px #FFA500;padding:5px;background:gray">';			echo	'<span style="color:#FFA500; font-weight:bold;">Notice ['.$errno.']</span>: <strong>'.$error.'</strong><br/><br/>';			echo	'<strong>File:</strong> '.$file.'<br/>';			echo	'<strong>Line:</strong> '.$line.'<br/>';			echo	'<strong>Context:</strong> '.$context.'<br/>';			echo '</div>';			break;		case E_WARNING:			echo '<div style="z-index:555;font-size:11px; font-family:arial;border:solid 1px red;padding:5px;background:gray">';			echo	'<span style="color:red; font-weight:bold;">Runtime Error ['.$errno.']</span>: <strong>'.$error.'</strong><br/><br/>';			echo	'<strong>File:</strong> '.$file.'<br/>';			echo	'<strong>Line:</strong> '.$line.'<br/>';			echo	'<strong>Context:</strong> '.$context.'<br/>';			echo '</div>';			break;		case E_NOTICE:			echo '<div style="z-index:555;font-size:11px; font-family:arial;border:solid 1px #FFA500;padding:5px;background:gray">';			echo	'<span style="color:#FFA500; font-weight:bold;">Runtime Notice ['.$errno.']</span>: <strong>'.$error.'</strong><br/><br/>';			echo	'<strong>File:</strong> '.$file.'<br/>';			echo	'<strong>Line:</strong> '.$line.'<br/>';			echo	'<strong>Context:</strong> '.$context.'<br/>';			echo '</div>';			break;		default:			echo '<div style="z-index:555;font-size:11px; font-family:arial;border:solid 1px red;padding:5px;background:gray">';			echo	'<span style="color:red; font-weight:bold;">Unknown Error ['.$errno.']</span>: <strong>'.$error.'</strong><br/><br/>';			echo	'<strong>File:</strong> '.$file.'<br/>';			echo	'<strong>Line:</strong> '.$line.'<br/>';			echo	'<strong>Context:</strong> '.$context.'<br/>';			echo '</div>';			break;	}	/* true, so PHP does not execute internal error handling */	return true;}/* * TODO: this needs to be rewritten and included in URL Helper *function convert_url_umlauts($url_link){	$clean = str_replace('ä', 'ae', $url_link);	$clean = str_replace('ö', 'oe', $clean);	$clean = str_replace('ü', 'ue', $clean);	$clean = str_replace('Ä', 'Ae', $clean);	$clean = str_replace('Ö', 'Oe', $clean);	$clean = str_replace('Ü', 'ue', $clean);	$clean = str_replace('ß', 'ss', $clean);	return $clean;}function clean_url_param($url_link){	$clean = preg_replace("/[^a-zA-Z0-9.\/_|+ -]/", '', $url_link);	$clean = preg_replace("/[\/|+ -]+/", '-', $clean);	return ($clean);}*//** * TODO: also needs rewrite and put into date/time helper * @param unknown_type $time1 * @param unknown_type $time2 *function get_timezone_difference($time1, $time2){	$time1 = strtotime("1980-01-01 $time1");	$time2 = strtotime("1980-01-01 $time2");	if ($time2 < $time1)	{		$time2 += 86400;	}	$diff	= $time2 - $time1;	if ( abs($diff) > (3600*12) )	{		$time 	= (3600*24)-$diff;		$op		= '+';	}	else	{		$time 	= $diff;		$op		= '-';	}	$timestamp	= strtotime("1980-01-01 00:00:00") + ($time);	$offset		= $op.date("H:i", $timestamp);	return $offset;}*//*function returnDate($querydate){$minusdate = date('ymdHi') - $querydate;if($minusdate > 88697640 && $minusdate < 100000000){    $minusdate = $minusdate - 88697640;}    switch ($minusdate) {        case ($minusdate < 99):                    if($minusdate == 1){                        $date_string = '1 minute ago';                    }                    elseif($minusdate > 59){                        $date_string =  ($minusdate - 40).' minutes ago';                    }                    elseif($minusdate > 1 && $minusdate < 59){                        $date_string = $minusdate.' minutes ago';                    }        break;        case ($minusdate > 99 && $minusdate < 2359):                    $flr = floor($minusdate * .01);                    if($flr == 1){                        $date_string = '1 hour ago';                    }                    else{                        $date_string =  $flr.' hours ago';                    }        break;        case ($minusdate > 2359 && $minusdate < 310000):                    $flr = floor($minusdate * .0001);                    if($flr == 1){                        $date_string = '1 day ago';                    }                    else{                        $date_string =  $flr.' days ago';                    }        break;        case ($minusdate > 310001 && $minusdate < 12320000):                    $flr = floor($minusdate * .000001);                    if($flr == 1){                        $date_string = "1 month ago";                    }                    else{                        $date_string =  $flr.' months ago';                    }        break;        case ($minusdate > 100000000):                $flr = floor($minusdate * .00000001);                if($flr == 1){                        $date_string = '1 year ago.';                }                else{                        $date_string = $flr.' years ago';                }        }    return $date_string;}function time_since_now($timestamp){	$diffu = array(		'seconds'	=> 2,		'minutes'	=> 120,		'hours'		=> 7200,		'days'		=> 172800,		'months'	=> 5259487,		'years'		=> 63113851	);	$diff	= time() - strtotime($timestamp, time());	$dt		= '0 seconds ago';	foreach ($diffu as $u => $n)	{		if($diff>$n)		{			$dt = floor($diff/(.5*$n)).' '.$u.' ago';		}	}	return $dt;}function print_arr($arr, $offset, $return = FALSE){	if ( isset($arr[$offset]) )	{		if ($return)			return $arr[$offset];		else			echo $arr[$offset];	}}*//*function array_implode( $glue, $separator, $array ){	if ( ! is_array( $array ) )		return $array;	$string = array();	foreach ( $array as $key => $val )	{		if ( is_array( $val ) )			$val = implode( ',', $val );		$string[] = "{$key}{$glue}{$val}";	}	return implode( $separator, $string );}*/