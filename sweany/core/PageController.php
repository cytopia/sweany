<?php/**
 * Sweany MVC PHP framework
 * Copyright (C) 2011-2012 Patu.
 *
 * Sweany is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Sweaby is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Sweany. If not, see <http://www.gnu.org/licenses/>.
 *
 * @copyright	Copyright 2011-2012, Patu
 * @link		none yet
 * @package		sweany.core
 * @author		Patu <pantu39@gmail.com>
 * @license		GPL 2 http://www.gnu.org/licenses/gpl-2.0.html
 * @version		0.7 2012-07-29 13:25 * * * Abstract parent for page controller */abstract Class PageController extends BaseController{	/* ***************************************************** VARIABLES ***************************************************** */	/*	 * Defines the type of the controller	 * page, layout or block.	 * This is used to tell the language class,	 * which section to use	 */	protected $ctrl_type = 'page';	/*	 * The following will define the Variables, View Layout and Blocks	 * to use	 *	 * Already defined in BaseController:	 *	private $vars	= array();	// all variables parsed to the view	 *	private $view	= null;		// the view itself to use	 */	private $layout	= null;		// the layout file to render the view into	private $blocks	= array();	// pre-rendered blocks (if any)	/*	 * Do use a model by default in page controllers	 */	protected $have_model = true;	/*	 * Array keeping track of the last page that has been visited on this Site	 *	 * If no last page exists, it will be null, otherwise:	 *	 * $lastPage['controller']	 * $lasgPage['method']	 * $lastPage['params']	 *	 */	private $lastPage = null;	/* ***************************************************** CONSTRUCTOR ***************************************************** */	public function __construct()	{		/*		 * Call the Parent Constructor		 * Note: Must be after setting the model, otherwise		 * it won't have an effect.		 */		parent::__construct();		/*		 * Keep track of last visited Page.		 * This is needed by the internal redirect functions		 */		$this-> _trackPreviousPage();	}	public function __desctruct()	{		parent::__destruct();	}	/* ***************************************************** CONTROLLER SETTER ***************************************************** */	/**	 *	 * Assign the class and function of the layout	 * controller to use	 *	 * @param string $class (name of class)	 * @param string $method (name of function)	 */	protected function layout($class, $method)	{		$this->layout = array($class, $method);	}	/**	 *	 * Attach blocks to the layout and return the return value	 * of the block function itself.	 *	 * @param string $varName	 * @param string $blockPluginName	 * @param string $blockControllerName	 * @param string $blockMethodName	 * @param array  $blockMethodParams	 * @return mixed	 */	protected function attachBlock($varName, $blockPluginName, $blockControllerName, $blockMethodName, $blockMethodParams = array())	{		if ( \Core\Init\CoreSettings::$showFwErrors > 2 || \Core\Init\CoreSettings::$logFwErrors > 2 )			$start = getmicrotime();		$output = Render::block($blockPluginName, $blockControllerName, $blockMethodName, $blockMethodParams);		if ( \Core\Init\CoreSettings::$showFwErrors > 2 || \Core\Init\CoreSettings::$logFwErrors > 2 )			SysLog::i('Attach Block', '(Done) | [to Page] from: '.$blockPluginName.'\\'.$blockControllerName.'::'.($blockControllerName).'->'.$blockMethodName, null, $start);		// 08) store block into array		$this->blocks[$varName]	= $output['content'];		return $output['return'];	}	/* ***************************************************** INDEX GETTER ***************************************************** */	public function getBlocks()	{		return $this->blocks;	}	public function getLayout()	{		return $this->layout;	}	public function isPlugin()	{		return $this->plugin;	}	/* ***************************************************** REDIRECTS ***************************************************** */	/**	 *	 * Redirect to a different page by Ctl/Method	 * Make sure to encode the parameter values nicely	 */	protected function redirect($controller, $method = null, $params = array())	{		$args = /*$this->__url_encode_params*/implode('/', $params);		$link = '/'.$controller;		$link.= ($method) ? (strlen($args) ? '/'.$method.'/'.$args : '/'.$method) : '';		// if debug is on, do not redirect, but show the link instead		if ( \Core\Init\CoreSettings::$showFwErrors )		{			echo '<font color="red">Redirect Call: </font><a href="'.$link.'">'.$link.'</a>';			\SysLog::show();			exit();		}		else		{			header('Location: '.$link);			exit();		}	}	/**	 *	 * Redirect to front page	 */	protected function redirectHome()	{		$this->redirect($GLOBALS['DEFAULT_CONTROLLER'], $GLOBALS['DEFAULT_METHOD']);	}	/**	 *	 * Redirect to the page you came from	 * TODO: This is still buggy, If user comes from external page and enters	 * redirecting or if he comes from redirecting and goes to redirecting	 * manually.	 */	protected function redirectBack()	{		$controller = $this->lastPage['controller'];		$method		= $this->lastPage['method'];		$params		= $this->lastPage['params'];		$this->redirect($controller, $method, $params);	}	protected function redirectDelayed($controller, $method, $params, $title, $body, $delay = 5)	{		$params			= (is_array($params)) ? $params : array();		$info['url']	= '/'.$controller.'/'.$method.'/'.implode('/', $params);		$info['delay']	= $delay;		$info['title']	= $title;		$info['body']	= $body;		\Core\Init\CoreSession::set('info_message_data', $info);		$this->redirect($GLOBALS['DEFAULT_INFO_MESSAGE_URL']);	}	protected function redirectDelayedHome($title, $body, $delay = 5)	{		$this->redirectDelayed($GLOBALS['DEFAULT_CONTROLLER'], $GLOBALS['DEFAULT_METHOD'], null, $title, $body, $delay);	}	/**	 * Redirect to the page you came from	 * TODO: This is still buggy, If user comes from external page and enters	 * redirecting or if he comes from redirecting and goes to redirecting	 * manually.	 */	protected function redirectDelayedBack($title, $body, $delay = 5)	{		$controller = $this->lastPage['controller'];		$method		= $this->lastPage['method'];		$params		= $this->lastPage['params'];		$this->redirectDelayed($controller, $method, $params, $title, $body, $delay);	}	/* ***************************************************** PRIVATES ***************************************************** */	private function _trackPreviousPage()	{		if ( \Core\Init\CoreSession::exists('_navigation') )		{			$navigation		= \Core\Init\CoreSession::get('_navigation');			$this->lastPage	= $navigation['thisPage'];		}		$navigation['thisPage'] = array('controller' => \Core\Init\CoreUrl::getController(), 'method' => \Core\Init\CoreUrl::getMethod(), 'params' => \Core\Init\CoreUrl::getParams());		$navigation['lastPage'] = $this->lastPage;		\Core\Init\CoreSession::set('_navigation', $navigation);	}}