<?php/**
 * Sweany MVC PHP framework
 * Copyright (C) 2011-2012 Patu.
 *
 * Sweany is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Sweaby is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Sweany. If not, see <http://www.gnu.org/licenses/>.
 *
 * @copyright	Copyright 2011-2012, Patu
 * @link		none yet
 * @package		sweany.core
 * @author		Patu <pantu39@gmail.com>
 * @license		GPL 2 http://www.gnu.org/licenses/gpl-2.0.html
 * @version		0.7 2012-07-29 13:25 * * * System Logger */use Core\Init\CoreSettings;
class SysLog{	/******************************************  V A R I A B L E S  ******************************************/	/**	 * Hold errors, warnings and info	 * that will be displayed after	 * page has been executed.	 * (if debug level is set in config.php)	 *	 */	private static $baseStore	= array();	private static $dbStore		= array();	private static $queryTime	= 0;	/******************************************  F U N C T I O N S  ******************************************/	/**	 *	 * Handle Logging of errors (stdout and file)	 *	 *	 * @param String $title	 * 		Title for the error	 *	 * @param String $message	 * 		Error message	 *	 * @param Array $trace	 * 		Debug backtrace array (if desired)	 *	 * @param Array $start_time	 * 		If specified, the logger will calculate the execution time	 *	 * @param Boolean $log_to_stdout	 * 		Override the Settings' loglevel for output loggin	 * 		This can be useful for the very start	 * 		When the Settings' Loglevel has not been initialized yet	 *	 * @param Boolean $log_to_file	 * 		Override the Settings' loglevel for file logging	 * 		This can be useful for the very start	 * 		When the Settings' Loglevel has not been initialized yet	 */	public static function e($title, $message, $trace = null, $start_time = null, $log_to_stdout = false, $log_to_file = false)	{		// Append information to logfile		if ( \Core\Init\CoreSettings::$logFwErrors || $log_to_file )		{			self::_logToFile('ERROR', $title, $message);		}		if ( !(\Core\Init\CoreSettings::$showFwErrors || $log_to_stdout) )			return;		$time = ($start_time) ? sprintf('%.6F',getmicrotime()-$start_time).'s' : '';		self::_store('baseStore', 'ERROR', $title, $message, $trace, $time, $log_to_stdout, $log_to_file);	}	public static function w($title, $message, $trace = null, $start_time = null, $log_to_stdout = false, $log_to_file = false)	{		// Append information to logfile		if ( \Core\Init\CoreSettings::$logFwErrors > 1 || $log_to_file )		{			self::_logToFile('WARNING', $title, $message);		}		if ( !(\Core\Init\CoreSettings::$showFwErrors > 1 || $log_to_stdout) )			return;		$time = ($start_time) ? sprintf('%.6F',getmicrotime()-$start_time).'s' : '';		self::_store('baseStore', 'WARNING', $title, $message, $trace, $time, $log_to_stdout, $log_to_file);	}	public static function i($title, $message, $trace = null, $start_time = null, $log_to_stdout = false, $log_to_file = false)	{		// Append information to logfile		if ( \Core\Init\CoreSettings::$logFwErrors > 2 || $log_to_file )		{			self::_logToFile('INFO', $title, $message);		}		if ( !(\Core\Init\CoreSettings::$showFwErrors > 2 || $log_to_stdout) )			return;		$time = ($start_time) ? sprintf('%.6F',getmicrotime()-$start_time).'s' : '';		self::_store('baseStore', 'INFO', $title, $message, $trace, $time, $log_to_stdout, $log_to_file);	}	public static function sqlError($title, $message, $time = null)	{		// Append information to logfile		if ( \Core\Init\CoreSettings::$logSqlErrors )		{			self::_logToFile('ERROR', $title, $message);		}		if ( !\Core\Init\CoreSettings::$showSqlErrors )			return;		self::_store('dbStore', 'ERROR', $title, $message, null, $time);	}	public static function sqlWarn($title, $message, $time = null)	{		// Append information to logfile		if ( \Core\Init\CoreSettings::$logSqlErrors > 1 )		{			self::_logToFile('WARNING', $title, $message);		}		if ( \Core\Init\CoreSettings::$showSqlErrors < 2 )			return;		self::_store('dbStore', 'WARNING', $title, $message, null, $time);	}	public static function sqlInfo($title, $message, $time = null)	{		// Append information to logfile		if ( \Core\Init\CoreSettings::$logSqlErrors > 2 )		{			self::_logToFile('INFO', $title, $message);		}		if ( \Core\Init\CoreSettings::$showSqlErrors < 3 )			return;		self::_store('dbStore', 'INFO', $title, $message, null, $time);	}	public static function sqlAppendTime($time)	{		if ( !\Core\Init\CoreSettings::$showSqlErrors )			return;		self::$queryTime += $time;	}	public static function show($return = false)	{		if ( !(\Core\Init\CoreSettings::$showPhpErrors ||			 \Core\Init\CoreSettings::$showFwErrors ||			 \Core\Init\CoreSettings::$showSqlErrors ) )			return;		$pre  	= '<style type="text/css">'.					'.sweanylog {'.						'border:1px solid #FFFFFF;'.						'font-family:courier; font-size:12px;'.						'color:#666666; background-color: black;'.						'padding:10px; line-height:130%; text-align:left;'.					'}'.					'.sweanylog table {'.						'border:1px solid #111111;'.						'font-family:courier; font-size:12px;'.						'color:#666666; background-color: black;'.					'}'.					'.sweanylog tr {'.						'border:1px solid #111111;'.						'font-family:courier; font-size:12px;'.						'color:#666666; background-color: black;'.					'}'.					'.sweanylog td {'.						'border:1px solid #111111;'.						'font-family:courier; font-size:12px;'.						'color:#666666; background-color: black;'.					'}'.					'.sweanylog h1 {'.						'border:none;'.						'font-family:courier; font-size:24px;'.						'color:#666666; background-color: black;'.					'}'.				'</style>';		$pre	.= '<div class="sweanylog">';		$post	= '</table></div>';		$error = '<h1>Syslog</h1>';		$lastErr=error_get_last();		if ( is_array($lastErr) )		{			$error .= '<font color="red">[PHP ERROR]</font> ';			$error .= '<strong>'.$lastErr['message'].'</strong>: ';			$error .= $lastErr['file'] .' on line '.$lastErr['line'].'<br/><br/>';		}		$error .= '<table>';		// Framework Logs		for ($i=0; $i<sizeof(self::$baseStore); $i++)		{			$error .= '<tr>';			$error .= '<td style="width:80px;">'.self::$baseStore[$i]['time'] .'&nbsp;</td>';			$error .= '<td style="width:80px;">';			switch ( self::$baseStore[$i]['type'] )			{				case 'ERROR': 		$error .= '<span style="color:#FF0000;">[ERROR]</span>';	break;				case 'WARNING': 	$error .= '<span style="color:#FF6903;">[Warn]</span>';		break;				case 'INFO': 		$error .= '<span style="color:#00FF00;">[Info]</span>';		break;				default: 			$error .= '<span style="color:#FF0000;">[Unknown]</span>';	break;			}			$error .= '</td>';			$color	= (self::$baseStore[$i]['type'] != 'INFO') ? 'color:#28F0BE;' : '';			$error .= '<td style="width:140px;'.$color.'"><strong>'.self::$baseStore[$i]['title'] .'</strong></td>';			$error .= '<td>';			$error .= 	self::$baseStore[$i]['message'];/*			if (is_array(self::$baseStore[$i]['error']) )			{				$error .= '<font color="red">[PHP ERROR]</font> ';				$error .= '<strong>'.self::$baseStore[$i]['error']['message'].'</strong>: ';				$error .= self::$baseStore[$i]['error']['file'] .' on line '.self::$baseStore[$i]['error']['line'].'<br/>';			}			*/			if ( sizeof(self::$baseStore[$i]['trace']) )			{				$error .= '<pre>'.print_r(self::$baseStore[$i]['trace'], true) .'</pre><br/>';			}			$error .= '</td>';			$error .= '</tr>';		}		// MySQL Query Logs		for ($i=0; $i<sizeof(self::$dbStore); $i++)		{			$error .= '<tr>';			$error .= '<td>'./*self::$dbStore[$i]['time'] .*/'&nbsp;</td>';			$error .= '<td>';			switch ( self::$dbStore[$i]['type'] )			{				case 'ERROR': 		$error .= '<span style="color:#FF0000;">[SQL ERR]</span>';		break;				case 'WARNING': 	$error .= '<span style="color:#FF6903;">[SQL WARN]</span>';		break;				case 'INFO': 		$error .= '<span style="color:purple;">[SQL INFO]</span>';		break;				default: 			$error .= '<span style="color:#FF0000;">[SQL UNKNOWN]</span>';	break;			}			$error .= '</td>';			$color	= (self::$dbStore[$i]['type'] != 'INFO') ? 'color:#28F0BE;' : '';			$error .= '<td style="'.$color.'"><strong>'.self::$dbStore[$i]['title'] .'</strong></td>';			$error .= '<td>';			$error .=	self::$dbStore[$i]['message'];			$error .= 	'<pre>'.print_r(self::$dbStore[$i]['trace'], true).'</pre>';			$error .= '</td>';			$error .= '</tr>';		}		//if ( \Core\Init\CoreSettings::$showSqlErrors > 2 )		//{			// Append total query time			$error .= '<tr>';			$error .= 	'<td>&nbsp;</td>';			$error .= 	'<td><span style="color:pink;">[SQL SUM]</span></td>';			$error .= 	'<td style="color:#28F0BE;"><strong>Total Query Time</strong></td>';			$error .= 	'<td><span style="color:green;">All queries took: '.sprintf('%f', round(self::$queryTime, 10)).' seconds</strong></td>';			$error .= '</tr>';		//}		//if ( \Core\Init\CoreSettings::$showFwErrors > 2 )
		//{			// MISC			$error .= '<tr>';			$error .= 	'<td>&nbsp;</td>';			$error .= 	'<td><span style="color:pink;">[SESS]</span></td>';			$error .= 	'<td style="color:#28F0BE;"><strong>SESSION</strong></td>';			$error .= 	'<td>';			$error .=		self::_traverseSession($_SESSION, 1);			$error .=	'</td>';			$error .= '</tr>';		//}		if ($return)			return $pre.$error.$post;		else			echo $pre.$error.$post;	}	/******************************************  P R I V A T E   F U N C T I O N S  ******************************************/	private static function _logToFile($type, $title, $message)	{		// fopen, fwrite, fclose is the faster than file_put_contents (which isjust a wrapper for that)		// fopen, fputs, fclose is fastest		$fp	= fopen(LOG_PATH.DS.$GLOBALS['FILE_LOG_CORE'], 'a');		fputs($fp, date('Y-m-d H:i:s')."\t['.$type.'] [".$title."]\t".strip_tags($message)."\n\r");		fclose($fp);	}	private static function _store($section, $type, $title, $message, $trace, $time)	{		$size = count(self::$$section);		self::${$section}[$size]['time']	= $time;		self::${$section}[$size]['type']	= $type;		self::${$section}[$size]['title']	= $title;		self::${$section}[$size]['message']	= $message;		self::${$section}[$size]['error']	= error_get_last();		self::${$section}[$size]['trace']	= $trace;	}	private static function _traverseSession($arr, $depth)	{		$error = '';		$tab = self::_getSpace($depth*4);		foreach ($arr as $key => $val)		{			$error .= $tab.'<font color="blue">['.$key.']</font>';			if ( is_array($val) )			{				$error .= '&nbsp;&nbsp;&nbsp;&nbsp; => Array<br/>'.$tab.'(<br/>'.self::_traverseSession($val, $depth+1);				$error .= $tab.')<br/>';			}			else			{				$error .= '&nbsp;&nbsp;&nbsp;&nbsp; => '.$val.'<br/>';			}		}		return $error;	}	private static function _getSpace($num)	{		$space ='';		for ($i=0; $i<$num; $i++)			$space .= '&nbsp;';		return $space;	}}?>