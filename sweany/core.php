<?php /*Fast Core*/ namespace{function debug($arr){echo '<pre>';print_r($arr);echo '</pre>';}function getmicrotime(){return microtime(true);}function ob_error_handler($str){$error=error_get_last();if ($error){return ini_get('error_prepend_string')."\n".'Fatal error: '.$error['message'].' in '.$error['file'].' on line '.$error['line']."\n".ini_get('error_append_string');}return $str;}function custom_php_error_handler($errno,$error,$file,$line,$context){switch ($errno){case E_USER_ERROR:echo '<div style="z-index:555;font-size:11px;font-family:arial;border:solid 1px red;padding:5px;background:gray">';echo'<span style="color:red; font-weight:bold;">Fatal Error ['.$errno.']</span>: <strong>'.$error.'</strong><br/><br/>';echo'<strong>File:</strong> '.$file.'<br/>';echo'<strong>Line:</strong> '.$line.'<br/>';echo'<strong>Context:</strong> '.$context.'<br/>';echo'<strong>PHP:<strong> ' . PHP_VERSION . ' (' . PHP_OS . ')<br/><br/>';echo'EXIT...<br/>';echo '</div>';exit(1);break;case E_USER_WARNING:echo '<div style="z-index:555;font-size:11px; font-family:arial;border:solid 1px #FFA500;padding:5px;background:gray">';echo'<span style="color:#FFA500; font-weight:bold;">Warning ['.$errno.']</span>: <strong>'.$error.'</strong><br/><br/>';echo'<strong>File:</strong> '.$file.'<br/>';echo'<strong>Line:</strong> '.$line.'<br/>';echo'<strong>Context:</strong> '.$context.'<br/>';echo '</div>';break;case E_USER_NOTICE:echo '<div style="z-index:555;font-size:11px; font-family:arial;border:solid 1px #FFA500;padding:5px;background:gray">';echo'<span style="color:#FFA500; font-weight:bold;">Notice ['.$errno.']</span>: <strong>'.$error.'</strong><br/><br/>';echo'<strong>File:</strong> '.$file.'<br/>';echo'<strong>Line:</strong> '.$line.'<br/>';echo'<strong>Context:</strong> '.$context.'<br/>';echo '</div>';break;case E_WARNING:echo '<div style="z-index:555;font-size:11px; font-family:arial;border:solid 1px red;padding:5px;background:gray">';echo'<span style="color:red; font-weight:bold;">Runtime Error ['.$errno.']</span>: <strong>'.$error.'</strong><br/><br/>';echo'<strong>File:</strong> '.$file.'<br/>';echo'<strong>Line:</strong> '.$line.'<br/>';echo'<strong>Context:</strong> '.$context.'<br/>';echo '</div>';break;case E_NOTICE:echo '<div style="z-index:555;font-size:11px; font-family:arial;border:solid 1px #FFA500;padding:5px;background:gray">';echo'<span style="color:#FFA500; font-weight:bold;">Runtime Notice ['.$errno.']</span>: <strong>'.$error.'</strong><br/><br/>';echo'<strong>File:</strong> '.$file.'<br/>';echo'<strong>Line:</strong> '.$line.'<br/>';echo'<strong>Context:</strong> '.$context.'<br/>';echo '</div>';break;default:echo '<div style="z-index:555;font-size:11px; font-family:arial;border:solid 1px red;padding:5px;background:gray">';echo'<span style="color:red; font-weight:bold;">Unknown Error ['.$errno.']</span>: <strong>'.$error.'</strong><br/><br/>';echo'<strong>File:</strong> '.$file.'<br/>';echo'<strong>Line:</strong> '.$line.'<br/>';echo'<strong>Context:</strong> '.$context.'<br/>';echo '</div>';break;}return true;}}namespace Core\Init{class CoreAbstract{protected static $error=null;public static function initialize(){self::$error='initialize() function not defined';return false;}public static function cleanup(){}public static function getError(){return self::$error;}}class CoreSettings extends CoreAbstract{public static $showPhpErrors=false;public static $showSqlErrors=false;public static $showFwErrors=false;public static $logPhpErrors=false;public static $logSqlErrors=false;public static $logFwErrors=false;private static $coreLogFile=null;private static $userLogFile=null;private static $timezone=null;public static function initialize(){self::_activateUTF8Encoding();self::$showPhpErrors=$GLOBALS['SHOW_PHP_ERRORS'];self::$showSqlErrors=$GLOBALS['SHOW_SQL_ERRORS'];self::$showFwErrors=$GLOBALS['SHOW_FRAMEWORK_ERRORS'];self::$logPhpErrors=$GLOBALS['LOG_PHP_ERRORS'];self::$logSqlErrors=$GLOBALS['LOG_SQL_ERRORS'];self::$logFwErrors=$GLOBALS['LOG_FRAMEWORK_ERRORS'];self::$coreLogFile=LOG_PATH.DS.$GLOBALS['FILE_LOG_CORE'];self::$userLogFile=LOG_PATH.DS.$GLOBALS['FILE_LOG_USER'];self::$timezone=$GLOBALS['DEFAULT_TIME_ZONE'];self::_setTimeZone();return true;}private static function _activateUTF8Encoding(){ini_set('default_charset','UTF-8');mb_internal_encoding('UTF-8');}private static function _setDebugging(){if (self::$showPhpErrors){ini_set('track_errors',1);ini_set('display_errors',1);ini_set('display_startup_errors',1);switch (self::$showPhpErrors){case 3: error_reporting(-1); break;case 2: error_reporting(E_ERROR | E_WARNING | E_PARSE); break;case 1: error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE); break;}set_error_handler('custom_php_error_handler');}else{ini_set('track_errors',0);ini_set("display_errors",0);error_reporting(0);}}private static function _setTimeZone(){date_default_timezone_set(self::$timezone);}}class CoreCallback extends CoreAbstract{private static $object=array();public static function initialize(){$controller=\Core\Init\CoreUrl::getController();$method=\Core\Init\CoreUrl::getMethod();$params=\Core\Init\CoreUrl::getParams();if (\Core\Init\CoreUrl::$request==$GLOBALS['DEFAULT_INFO_MESSAGE_URL']){\SysLog::i('Callback','Internal request: '.\Core\Init\CoreUrl::$request);require_once(CORE_PAGES_PATH.DS.'FrameworkDefault.php');self::$object=array('class'=> 'FrameworkDefault','method'=> 'info_message','params'=> array(\Core\Init\CoreUrl::$request),);return true;}else if (!$controller){\SysLog::w('Callback','no url request made - using default controller');require(PAGES_CONTROLLER_PATH.DS.$GLOBALS['DEFAULT_CONTROLLER'].'.php');require(PAGES_MODEL_PATH.DS.$GLOBALS['DEFAULT_CONTROLLER'].'Model.php');self::$object=array('class'=> $GLOBALS['DEFAULT_CONTROLLER'],'method'=> $GLOBALS['DEFAULT_METHOD'],'params'=> array(),);return true;}else if (!self::_isCallable($controller,$method)){\SysLog::w('Callback','Wrong request: class &lt;'.$controller.'&gt; and method &lt;'.$method.'&gt; not found.');require_once(CORE_PAGES_PATH.DS.'FrameworkDefault.php');self::$object=array('class'=> 'FrameworkDefault','method'=> 'url_not_found','params'=> array(\Core\Init\CoreUrl::$request),);return true;}else if (!self::_isControllerClass($controller)){\SysLog::w('Callback','Wrong request: class &lt;'.$controller.'&gt; is not a Controller class.');require(PAGES_CONTROLLER_PATH.DS.$GLOBALS['ERROR_CONTROLLER'].'.php');require(PAGES_MODEL_PATH.DS.$GLOBALS['ERROR_CONTROLLER'].'Model.php');self::$object=array('class'=> $GLOBALS['ERROR_CONTROLLER'],'method'=> $GLOBALS['ERROR_METHOD'],'params'=> array(Url::$request),);return true;}else if (self::_methodIsForbidden($method)){\SysLog::w('Callback','Method &lt;'.$method.'&gt; is not allowed to be called');require_once(CORE_PAGES_PATH.DS.'FrameworkDefault.php');self::$object=array('class'=> 'FrameworkDefault','method'=> 'url_not_found','params'=> array(Url::$request),);return true;}else{self::$object=array('class'=> $controller,'method'=> $method,'params'=> $params,);return true;}}public static function getObject(){return self::$object;}private static function _isCallable($class,$method){if (!class_exists($class)){\SysLog::w('Callback','class &lt;'.$class.'&gt; does not exist.');return false;}if (!method_exists($class,$method)){\SysLog::w('Callback','method &lt;'.$method.'&gt; does not exist in class &lt;'.$class.'&gt;');return false;}if (!@is_callable(array($class,$method))){\SysLog::w('Callback','method &lt;'.$method.'&gt; is not publically callable in class &lt;'.$class.'&gt;');return false;}return true;}private static function _isControllerClass($class){if (get_parent_class($class) !='PageController'){return false;}return true;}private static function _methodIsForbidden($method){$pageCtlMethods=get_class_methods('PageController');$baseCtlMethods=get_class_methods('BaseController');$blacklistMethods=array_merge($pageCtlMethods,$baseCtlMethods);foreach ($blacklistMethods as $forbidden){if ($method==$forbidden){return true;}}return false;}private static function _blockMethodIsCallable($blockCtrl,$blockMthd){return true;}}class CoreSession extends CoreAbstract{public static function initialize(){if (session_start()){return true;}else{switch (session_status()){case PHP_SESSION_DISABLED:self::$error='PHP_SESSION_DISABLED';return false; break;case PHP_SESSION_NONE : self::$error='PHP_SESSION_NONE';return false; break;case PHP_SESSION_ACTIVE :self::$error='PHP_SESSION_ACTIVE';return false; break;default: self::$error='Unknown Session Error '; return false;}}}public static function getId(){return (session_id());}public static function get($key){return (isset($_SESSION[$key])) ? $_SESSION[$key] : null;}public static function getSubKey($section,$key,$position=null){if ($position){$tmp=isset($_SESSION[$section][$position][$key]) ? $_SESSION[$section][$position][$key] : array();}else{$tmp=isset($_SESSION[$section][$key]) ? $_SESSION[$section][$key] : array();}return ($tmp);}public static function set($key,$val){$_SESSION[$key]=$val;}public static function exists($key){return isset($_SESSION[$key]);}public static function del($key){if (isset($_SESSION[$key]))unset($_SESSION[$key]);}public static function delSubKey($key,$sub_key){if (isset($_SESSION[$key][$sub_key]))unset($_SESSION[$key][$sub_key]);}public static function destroy(){if (ini_get("session.use_cookies")){$params=session_get_cookie_params();setcookie(session_name(),'',time() - 42000,$params['path'],$params['domain'],$params['secure'],$params['httponly']);}session_destroy();}}Class CoreLanguage extends CoreAbstract{private static $instance=null;private static $langName=null;private static $langShort=null;private static $langLong=null;private static $_language=null;private $_path=null;private $_id=null;private $_section=null;public static function initialize(){$short=self::chooseLanguage();$success=self::loadFile($short);return $success;}public static function getLangShort(){if ($GLOBALS['LANGUAGE_ENABLE']==true)return self::$langShort;else return $GLOBALS['HTML_DEFAULT_LANG_SHORT'];}public static function getLangLong(){if ($GLOBALS['LANGUAGE_ENABLE']==true)return self::$langLong;else return $GLOBALS['HTML_DEFAULT_LANG_LONG'];}public static function changeLanguage($short_lang='en'){\SysLog::i('Language','Change to '.$short_lang);\Core\Init\CoreSession::set('language',array('short'=> $short_lang));$short=self::chooseLanguage();self::loadFile($short);}public function __construct($plugin,$type,$controller){$section=(strlen($plugin)) ? 'plugins/'.$plugin : 'usr';$sub=($type=='page') ? 'PageSection' : (($type=='layout') ? 'LayoutSection' : 'BlockSection');$sub=(strlen($plugin)) ? $sub : $sub.'/'.$controller;$path='/root/'.$section.'/'.$sub.'/'.$type;$this->_path=$path;\SysLog::i('Language','Creating instance for: ['.$type.'] in: '.$path);}public function set($function){$this->_id=$function;$path=$this->_path.'[@id="'.$function.'"]';$this->_section=self::$_language->xpath($path);}public function setCore($id){$this->_section=self::$_language->xpath('/root/core/default/page[@id="'.$id.'"]');}public function getCustom($path,$key){$tmp=self::$_language->xpath($path);if (!isset($tmp[0])){\SysLog::e('Language','['.$path.'"]['.$key.'] does not exist');if (\Core\Init\CoreSettings::$showPhpErrors==0)return '';}if (!count($tmp[0]->$key)){\SysLog::e('Language','['.$path.'"]['.$key.'] does not exist');if (\Core\Init\CoreSettings::$showPhpErrors==0)return '';}if (count($tmp[0]->$key) > 1)return (Array)$tmp[0]->$key;else return (String)$tmp[0]->$key;}public function __get($key){if (!isset($this->_section[0])){\SysLog::e('Language','['.$this->_path.' id="'.$this->_id.'"]['.$key.'] does not exist');if (\Core\Init\CoreSettings::$showPhpErrors==0)return '';}if (!count($this->_section[0]->$key)){\SysLog::e('Language','['.$this->_path.' id="'.$this->_id.'"]['.$key.'] does not exist');if (\Core\Init\CoreSettings::$showPhpErrors==0)return '';}if (count($this->_section[0]->$key) > 1)return $this->_section[0]->$key;else return (String)$this->_section[0]->$key;}private static function chooseLanguage(){if (\Core\Init\CoreSession::exists('language')){$lang=\Core\Init\CoreSession::get('language');$short=$lang['short'];$file=USR_LANGUAGES_PATH.DS.$short.'.xml';if (!file_exists($file)){\Log::setWarn('Language','[Choose] File does not exist - Using default');$short=$GLOBALS['LANGUAGE_DEFAULT_SHORT'];}}else{\SysLog::w('Language','[Choose] Session does not exist - Using default');$short=$GLOBALS['LANGUAGE_DEFAULT_SHORT'];\Core\Init\CoreSession::set('language',array('short'=> $short));}return $short;}private static function loadFile($lang_short){$xml_lang=USR_LANGUAGES_PATH.DS.$lang_short.'.xml';if (file_exists($xml_lang)){self::$_language=simplexml_load_file($xml_lang);$settings=self::$_language->xpath('/root/core/settings');self::$langName=$settings[0]->lang_name;self::$langShort=$settings[0]->lang_short;self::$langLong=$settings[0]->lang_long;return true;}else{self::$error='File does not exist: '.$xml_lang;return false;}}}class CoreMySql extends CoreAbstract{private static $link=null;private static $query=null;public static $srvTime=null;public static $srvTimeOff=null;public static function initialize(){$host=$GLOBALS['SQL_HOST'];$db=$GLOBALS['SQL_DB'];$user=$GLOBALS['SQL_USER'];$pass=$GLOBALS['SQL_PASS'];self::$link=@mysql_connect($host,$user,$pass);if (!self::$link){self::$error='Connect,Could not connect to host: '.$host;return false;}if (!@mysql_select_db($db,self::$link)){self::$error='Database,'.'Coult not select db: '.$db;return false;}if (!@mysql_set_charset('utf8',self::$link)){self::$error='Charset,Coult not be set to utf8';return false;}if (!@mysql_query("SET character_set_results='utf8',character_set_client='utf8',character_set_connection='utf8',character_set_database='utf8',character_set_server='utf8'",self::$link)){self::$error='Encodings and Connections could not be set to utf8';return false;}return true;}public static function cleanup(){if (is_object(self::$link))mysql_close(self::$link);}public static function select($query){self::$query=$query;$start=microtime(true);$result=mysql_query($query,self::$link);$time=self::_getQueryTime($start,microtime(true));$data=array();if (!$result){\SysLog::sqlError('select',self::_formatError($query,$time));return (-1);}while ($row=mysql_fetch_array($result,MYSQL_ASSOC))$data[]=$row;if (!mysql_free_result($result))\SysLog::sqlError('Cannot Free Result',self::_formatError($query,$time),$data);\SysLog::sqlAppendTime($time);\SysLog::sqlInfo('select',self::_formatError($query,$time),$data);return ($data);}public static function selectNumRows($query){self::$query=$query;$start=microtime(true);$result=mysql_query($query,self::$link);$time=self::_getQueryTime($start,microtime(true));if (!$result){\SysLog::sqlError('numRows',self::_formatError($query,$time));return (-1);}$num=mysql_numrows($result);$time=self::_getQueryTime($start,microtime(true));if (!mysql_free_result($result))\SysLog::sqlError('Cannot Free Result',self::_formatError($query,$time));\SysLog::sqlAppendTime($time);\SysLog::sqlInfo('numRows',self::_formatError($query,$time));return ($num);}public static function fetch($table,$fields=array(),$where=null,$having=null,$order=array(),$limit_num=null,$limit_start=null){$fields=self::_getFields($fields);$where=self::_getWhere($where);$having=self::_getHaving($having);$order=self::_getOrderBy($order);$limit=self::_getLimit($limit_num,$limit_start);$query=sprintf('SELECT %s FROM `%s` %s %s %s %s',$fields,$table,$where,$having,$order,$limit);return self::select($query);}public static function fetchField($table,$field,$where){$where=self::_getWhere($where);$query=sprintf('SELECT `%s` FROM `%s` %s',$field,$table,$where);$data=self::select($query);if (!isset($data[0][$field])){\SysLog::sqlWarn('fetchField','returning empty field: '.self::$query,null);return null;}if (count($data) > 1){\SysLog::sqlWarn('fetchField','result hash more than one row: '.self::$query,null,$data);}return $data[0][$field];}public static function fetchColumnFields($table,$field,$where=null,$having=null,$order=array(),$limit_num=null,$limit_start=null){$idArr=self::fetch($table,array($field=> $field),$where,$having,$order,$limit_num,$limit_start);return array_map(create_function('$arr','return (current($arr));'),array_values($idArr));}public static function fetchFieldById($table,$field,$id){return self::fetchField($table,$field,sprintf("id=%d",(int)$id));}public static function fetchByIds($table,$ids=array(),$fields=array(),$order=array(),$limit_num=null,$limit_start=null){$ids=implode(',',$ids);$fields=self::_getFields($fields);$order=self::_getOrderBy($order);$limit=self::_getLimit($limit_num,$limit_start);$query=sprintf('SELECT %s FROM `%s` WHERE id IN (%s) %s %s',$fields,$table,$ids,$order,$limit);return self::select($query);}public static function fetchRowById($table,$id,$fields=array()){$fields=self::_getFields($fields);$query=sprintf('SELECT %s FROM `%s` WHERE `id`=%d',$fields,$table,(int)$id);$data=self::select($query);if (!isset($data[0])){\SysLog::sqlWarn('fetchRowById','returning empty array: '.self::$query);return array();}if (count($data) > 1){\SysLog::sqlWarn('fetchRowById','result hash more than one row: '.self::$query,$data);}return $data[0];}public static function fetchByField($table,$field,$value,$fields=array()){$fields=self::_getFields($fields);$query=sprintf('SELECT %s FROM `%s` WHERE `%s`="%s"',$fields,$table,$field,mysql_real_escape_string($value));return self::select($query);}public static function insertRow($table,$field_array=array()){$fields=implode(',',array_map(create_function('$key','return "`".$key."`";'),array_keys($field_array)));$values=implode(',',array_map(create_function('$val','return "\'".mysql_real_escape_string($val)."\'";'),array_values($field_array)));$query=sprintf('INSERT INTO `%s` (%s) VALUES(%s)',$table,$fields,$values);$start=microtime(true);$result=mysql_query($query,self::$link);$time=self::_getQueryTime($start,microtime(true));if (!$result){\SysLog::sqlError('insertRow',self::_formatError($query,$time));return (-1);}\SysLog::sqlAppendTime($time);\SysLog::sqlInfo('insertRow',self::_formatError($query,$time),null);return (self::_getLastInsertId());}public static function update($table,$field_array=array(),$where){$fields=implode(',',array_map(create_function('$key,$val','return "`".$key."`=\'".mysql_real_escape_string($val)."\'";'),array_keys($field_array),array_values($field_array)));$where=self::_getWhere($where);$query=sprintf('UPDATE `%s` SET %s %s',$table,$fields,$where);$start=microtime(true);$result=mysql_query($query,self::$link);$time=self::_getQueryTime($start,microtime(true));if (!$result){\SysLog::sqlError('updateRow',self::_formatError($query,$time));return (-1);}\SysLog::sqlAppendTime($time);\SysLog::sqlInfo('updateRow',self::_formatError($query,$time));return (1);}public static function updateRow($table,$field_array=array(),$id){return self::update($table,$field_array,sprintf('`id`=%d',(int)$id));}public static function incrementField($table,$field,$where,$get_update_id=null,$other_fields=array()){$condition=self::_getWhere($where);$fields=implode(',',array_map(create_function('$key,$val','return "`".$key."`=\'".mysql_real_escape_string($val)."\'";'),array_keys($other_fields),array_values($other_fields)));$fields=strlen($fields) ? ','.$fields : '';$query=sprintf("UPDATE `%s` SET `%s`=`%s` + 1 %s %s",$table,$field,$field,$fields,$condition);$start=microtime(true);$result=mysql_query($query,self::$link);$time=self::_getQueryTime($start,microtime(true));if (!$result){\SysLog::sqlError('updateRow',self::_formatError($query,$time));return (-1);}\SysLog::sqlAppendTime($time);\SysLog::sqlInfo('updateRow',self::_formatError($query,$time));return ($get_update_id) ? self::fetchField($table,'id',$where) : 1;}public static function delete($table,$where){$condition=self::_getWhere($where);$query=sprintf("DELETE FROM `%s` %s",$table,$condition);$start=microtime(true);$result=mysql_query($query,self::$link);$time=self::_getQueryTime($start,microtime(true));if (!$result){\SysLog::sqlError('delete',self::_formatError($query,$time));return (-1);}\SysLog::sqlAppendTime($time);\SysLog::sqlInfo('delete',self::_formatError($query,$time),null);return (1);}public static function deleteRow($table,$id){return self::delete($table,sprintf('`id`=%d',(int)$id));}public static function count($table,$where=null){$where=self::_getWhere($where);$query=sprintf('SELECT COUNT(*) AS counter FROM `%s` %s',$table,$where);$data=self::select($query);return (isset($data[0]['counter'])) ? $data[0]['counter'] : 0;}public static function existField($table,$field,$value){return self::count($table,sprintf("`%s`='%s'",$field,mysql_real_escape_string($value)));}public static function existId($table,$id){return (is_numeric($id)) ? self::count($table,sprintf('`id`=%d',(int)$id)) : FALSE;}private static function _getLastInsertId(){$result=mysql_query('SELECT LAST_INSERT_ID() AS id');$row=mysql_fetch_array($result,MYSQL_ASSOC);return $row['id'];}public static function _getDate(){$date=self::select("SELECT CURDATE() AS d;");return $date[0]['d'];}public static function _getTime(){$date=self::select("SELECT CURTIME() AS t;");return $date[0]['t'];}public static function _getTimeHour(){$hour=self::select("SELECT HOUR(NOW()) AS h");return $hour[0]['h'];}public static function _getTimeMin(){$min=self::select("SELECT MINUTE(NOW()) AS m");return $min[0]['m'];}public static function _getNow(){$date=self::select("SELECT NOW() AS n;");return $date[0]['n'];}public static function _getGlobalTimeZone(){$zone=self::select("SELECT @@global.time_zone AS g");return $zone[0]['g'];}public static function _getSessionTimeZone(){$zone=self::select("SELECT @@session.time_zone AS s");return $zone[0]['s'];}private static function _setServerTimeZone(){$mysql=self::_getTime();$php=date('H:i',time());$offset=get_timezone_difference($php,$mysql);self::$srvTime=self::_getNow();self::$srvTimeOff=$offset;return self::_setServerFlags(array('time_zone'=> $offset));}private static function _setServerFlags($flags=array()){$flags=implode(',',array_map(create_function('$key,$val','return "`".$key."`=\'".mysql_real_escape_string($val)."\'";'),array_keys($flags),array_values($flags)));$query=sprintf('SET %s',$flags);$start=microtime(true);$result=mysql_query($query,self::$link);$time=self::_getQueryTime($start,microtime(true));if (!$result){\SysLog::sqlError('set Server flags',self::_formatError($query,$time));return (0);}\SysLog::sqlAppendTime($time);\SysLog::sqlInfo('SET flags',self::_formatError($query,$time));return true;}private static function _getFields($fields=array()){return (count($fields)) ? implode(',',array_map(create_function('$key,$val','return " ".$key." AS ".$val;'),array_values($fields),array_keys($fields))) : '*';}private static function _getWhere($where=null){return ($where) ? sprintf('WHERE %s',$where) : '';}private static function _getHaving($having=null){return ($having) ? sprintf('HAVING %s',$having) : '';}private static function _getOrderBy($order=null){return (count($order)>0) ? 'ORDER BY '.implode(',',array_map(create_function('$key,$val','return "$key ".$val;'),array_keys($order),array_values($order))) : '';}private static function _getLimit($limit_num=null,$limit_start=null){if (is_numeric($limit_num) && $limit_num > 0){if (is_numeric($limit_start) && $limit_start > 0)return 'LIMIT '.$limit_start.','.$limit_num;else return 'LIMIT '.$limit_num;}return '';}private static function _formatError($query,$time=null){if (mysql_errno(self::$link))$str='<font color="red"><b>'.mysql_errno(self::$link).'</b>: '.mysql_error(self::$link).'</font><br><font color="blue">'.$query.'</font><br/>';else$str="<font face='courier' color='blue'>".$query."</font><br/>";if ($time)$str .='<font color="green">Query took <b>'.$time.'</b> seconds</font>';return $str;}private static function _getQueryTime($start,$end){return sprintf('%f',round($end-$start,10));}}class CoreUrl extends CoreAbstract{public static $request=null;private static $urlParams=null;public static function initialize(){self::$request=$_SERVER['REQUEST_URI'];if (isset(self::$request[0]) &&  self::$request[0]=='/'){self::$request=substr(self::$request,1,strlen(self::$request));}$params=explode('/',self::$request);$encoded=array();foreach ($params as $param)if (strlen($param) > 0)$encoded[]=self::_encodeParam($param);self::$urlParams=$encoded;return true;}public static function getController(){return isset(self::$urlParams[0]) ? self::$urlParams[0] : null;}public static function getMethod(){return isset(self::$urlParams[1]) ? self::$urlParams[1] : $GLOBALS['ANY_CONTROLLER_DEFAULT_METHOD'];}public static function getParams(){$params=array();for ($i=2; $i<sizeof(self::$urlParams); $i++){$params[]=self::$urlParams[$i];}return $params;}public static function getRequest(){return self::$request;}public static function changeSingleParam($param_position,$value){$arr=self::getParams();$size=(sizeof($arr) >=$param_position) ? sizeof($arr) : $param_position;$params=array();for($i=0; $i<$size; $i++){if (!isset($arr[$i]) && !strlen($arr[$i]))$params[$i]=0;else$params[$i]=$arr[$i];}$params[$param_position-1]=self::_encodeParam($value);return $params;}private static function _encodeParam($value){return ($value);}}class CoreUsers extends CoreAbstract{private static $tbl_users='users';private static $tbl_user_groups='user_groups';private static $tbl_failed_logins='user_failed_logins';private static $tbl_online_users='user_online';private static $onlineSinceMinutes=20;private static $fakeOnlineGuests=10;public function __construct(){\Core\Init\CoreMySql::insertRow(self::$tbl_online_users,array('time'=> time(),'fk_user_id'=> self::id(),'session_id'=> \Core\Init\CoreSession::getId(),'ip'=> $_SERVER['REMOTE_ADDR'],'current_page'=> \Core\Init\CoreUrl::$request));\Core\Init\CoreMySql::delete(self::$tbl_online_users,sprintf('`time` < %d',strtotime('-'.self::$onlineSinceMinutes.' minute',time())));}public static function initialize(){return true;}public static function countOnlineUsers(){return (self::$fakeOnlineGuests + \Core\Init\CoreMySql::selectNumRows('SELECT DISTINCT `session_id` FROM '.self::$tbl_online_users));}public static function countLoggedInOnlineUsers(){return \Core\Init\CoreMySql::selectNumRows('SELECT fk_user_id FROM(SELECT DISTINCT fk_user_id,session_id FROM user_online WHERE fk_user_id>0 GROUP BY session_id) AS tbl_result GROUP BY tbl_result.fk_user_id');}public static function countAnonymousOnlineUsers(){return (self::$fakeOnlineGuests +\Core\Init\CoreMySql::selectNumRows('SELECT DISTINCT session_id FROM user_online WHERE fk_user_id=0 AND session_id NOT IN(SELECT session_id FROM (SELECT DISTINCT fk_user_id,session_id FROM user_online WHERE fk_user_id>0 GROUP BY session_id) AS tbl_result GROUP BY tbl_result.fk_user_id) GROUP BY session_id'));}public static function getLoggedInOnlineUsers(){$query='SELECT fk_user_id AS id,users.username FROM(SELECT DISTINCT fk_user_id,session_id FROM user_online WHERE fk_user_id>0 GROUP BY session_id) AS tbl_result JOIN users ON (users.id=tbl_result.fk_user_id) GROUP BY tbl_result.fk_user_id';return \Core\Init\CoreMySql::select($query);}public static function getAllUsers(){return \Core\Init\CoreMySql::select('SELECT * FROM '.self::$tbl_users);}public static function getAllUserGroups($order=array()){return \Core\Init\CoreMySql::select('SELECT * FROM '.self::$tbl_user_groups);}public static function getAllFailedLogins($order=array()){return \Core\Init\CoreMySql::select('SELECT * FROM '.self::$tbl_failed_logins);}public static function update($fields=array()){if (isset($fields['modified']))$fields['modified']=date("Y-m-d H:i:s",time());if (isset($fields['password']))$fields['password']=self::_encryptPassword($fields['password']);return \Core\Init\CoreMySql::updateRow(self::$tbl_users,$fields,self::id());}public static function updatePassword($user_id,$password){$fields['password']=self::_encryptPassword($password);return \Core\Init\CoreMySql::updateRow(self::$tbl_users,$fields,$user_id);}public static function isMyPassword($clearTextPwd){$encrypted=self::_encryptPassword($clearTextPwd);$data=self::data();return ($encrypted==$data['password']);}public static function data(){$query=sprintf('SELECT * FROM `%s` WHERE `id`=%d',self::$tbl_users,self::id());$data=\Core\Init\CoreMysql::select($query);return $data[0];}public static function id(){return self::isLoggedIn();}public static function name(){return \Core\Init\CoreMySql::fetchFieldById(self::$tbl_users,'username',self::_isLoggedIn());}public static function getNameById($id){return \Core\Init\CoreMySql::fetchFieldById(self::$tbl_users,'username',$id);}public static function getIdByNameAndPassword($username,$password){return \Core\Init\CoreMySql::fetchField(self::$tbl_users,'id',sprintf("`username`='%s' AND `password`='%s'",mysql_real_escape_string($username),self::_encryptPassword($password)));}public static function getIdByName($username){return \Core\Init\CoreMySql::fetchField(self::$tbl_users,'id',sprintf("`username`='%s'",mysql_real_escape_string($username)));}public static function getIdByEmail($email){return \Core\Init\CoreMySql::fetchField(self::$tbl_users,'id',sprintf("`email`='%s'",mysql_real_escape_string($email)));}public static function getIdByResetPasswordKey($reset_password_key){return \Core\Init\CoreMySql::fetchField(self::$tbl_users,'id',sprintf("`reset_password_key`='%s'",mysql_real_escape_string($reset_password_key)));}public static function getEnabledUser(){$user_id=self::isLoggedIn();return self::_getEnabledUser($user_id);}public static function isLoggedIn(){return self::_isLoggedIn();}public static function setResetPasswordKey($user_id){$session_id=Session::getId();$ip=$_SERVER['REMOTE_ADDR'];$hostname=$hostname=@gethostbyaddr($ip);$key=md5(rand().time().$session_id.$ip.$hostname.rand().$user_id);return \Core\Init\CoreMySql::updateRow(self::$tbl_users,array('reset_password_key'=> $key),$user_id);}public static function checkPasswordResetKey($password_reset_key){$condition=sprintf("reset_password_key='%s' AND LENGTH(reset_password_key)>0",mysql_real_escape_string($password_reset_key));$user_id=\Core\Init\CoreMySql::fetchField(self::$tbl_users,'id',$condition);if ($user_id){return \Core\Init\CoreMySql::updateRow(self::$tbl_users,array('is_enabled'=> 1,'validation_key'=> ''),$user_id);}else{return false;}}public static function removeResetPasswordKey($user_id){return \Core\Init\CoreMySql::updateRow(self::$tbl_users,array('reset_password_key'=> ''),$user_id);}public static function isAdmin(){$user_id=self::_isLoggedIn();return self::_isAdmin($user_id);}public static function logout($session_id){if ($session_id==\Core\Init\CoreSession::getId()){\Core\Init\CoreSession::del('user');return true;}return false;}public static function usernameExists($username){return \Core\Init\CoreMySql::count(self::$tbl_users,sprintf("username='%s'",mysql_real_escape_string($username)));}public static function emailExists($email){return \Core\Init\CoreMySql::count(self::$tbl_users,sprintf("email='%s'",mysql_real_escape_string($email)));}public static function otherUserHasThisEmail($email){return \Core\Init\CoreMySql::count(self::$tbl_users,sprintf("`email`='%s' AND `id` <> %d",mysql_real_escape_string($email),self::id()));}public static function exists($user_id){return \Core\Init\CoreMySql::count(self::$tbl_users,sprintf("`id`=%d",mysql_real_escape_string($user_id)));}public static function isLocked($user_id){return \Core\Init\CoreMySql::count(self::$tbl_users,sprintf("`id`=%d AND is_locked=1",mysql_real_escape_string($user_id)));}public static function isEnabled($user_id){return \Core\Init\CoreMySql::count(self::$tbl_users,sprintf("`id`=%d AND is_enabled=1",mysql_real_escape_string($user_id)));}public static function isDeleted($user_id){return \Core\Init\CoreMySql::count(self::$tbl_users,sprintf("`id`=%d AND is_deleted=1",mysql_real_escape_string($user_id)));}public static function checkLogin($username,$password,$log_bad_attempts=true){$password=self::_encryptPassword($password);$user_id=self::_getUserIdByName($username);$user=self::_getEnabledUser($user_id);$condition=sprintf("username='%s' AND password='%s' AND is_enabled=1 AND is_deleted=0 AND is_locked=0",mysql_real_escape_string($username),$password);if (\Core\Init\CoreMySql::count(self::$tbl_users,$condition)){return true;}\Core\Init\CoreMySql::incrementField(self::$tbl_users,'last_failed_login_count',sprintf("id=%d",(int)$user_id));if ($log_bad_attempts){self::_logFailedLogin($username,$password);}return false;}public static function validate($validation_key){$condition=sprintf("validation_key='%s'",mysql_real_escape_string($validation_key));$user_id=\Core\Init\CoreMySql::fetchField(self::$tbl_users,'id',$condition);if ($user_id){return \Core\Init\CoreMySql::updateRow(self::$tbl_users,array('is_enabled'=> 1,'validation_key'=> ''),$user_id);}else{return false;}}public static function login($username,$password,$log_bad_attempts=true){$user_id=self::_getUserIdByName($username);$condition=sprintf("username='%s' AND password='%s' AND is_enabled=1 AND is_deleted=0 AND is_locked=0",mysql_real_escape_string($username),$password);if (self::checkLogin($username,$password,$log_bad_attempts)){$user=self::_getEnabledUser($user_id);self::_updateSuccessfulLogin($user_id);unset($user['password']);$user['auth']=TRUE;\Core\Init\CoreSession::set('user',$user);return true;}return false;}public static function addUser($username,$password,$email){$data=array('username'=> $username,'password'=> self::_encryptPassword($password),'email'=> $email,'has_accepted_terms'=> 1,'is_enabled'=> 0,'is_locked'=> 0,'is_deleted'=> 0,'validation_key'=> md5(\Core\Init\CoreSession::getId().$username.$password.$email.time()),'created'=> date("Y-m-d H:i:s",time()),);return \Core\Init\CoreMySql::insertRow('users',$data);}private static function _encryptPassword($password){return md5(md5($password).$GLOBALS['USER_PWD_SALT']);}private static function _isLoggedIn(){$user=\Core\Init\CoreSession::get('user');$user_id=isset($user['id']) ? $user['id'] : 0;$sess_id=\Core\Init\CoreSession::getId();if (!$user['auth']){return FALSE;}if ($sess_id !=\Core\Init\CoreMySql::fetchFieldById(self::$tbl_users,'session_id',$user_id)){return FALSE;}return $user_id;}private static function _isAdmin($user_id){return \Core\Init\CoreMySql::fetchFieldById(self::$tbl_users,'is_admin',$user_id);}private static function _getEnabledUser($user_id){$query=sprintf('SELECT * FROM '.self::$tbl_users.' WHERE id=%d AND is_deleted=0 AND is_locked=0 AND is_enabled=1',$user_id);$data=\Core\Init\CoreMySql::select($query);return isset($data[0]) ? $data[0] : array();}private static function _getUserIdByName($username){return \Core\Init\CoreMySQL::fetchField(self::$tbl_users,'id',sprintf("username='%s'",$username));}private static function _updateSuccessfulLogin($user_id){$session_id=\Core\Init\CoreSession::getId();$ip=$_SERVER['REMOTE_ADDR'];$hostname=$hostname=@gethostbyaddr($ip);$login_time=date("Y-m-d H:i:s",time());$fields=array('session_id'=> $session_id,'last_ip'=> $ip,'last_host'=> $hostname,'last_login'=> $login_time,'last_failed_login_count'=> 0,);return \Core\Init\CoreMySQL::updateRow(self::$tbl_users,$fields,$user_id);}private static function _logFailedLogin($username,$password){$session_id=\Core\Init\CoreSession::getId();$ip=$_SERVER['REMOTE_ADDR'];$hostname=$hostname=@gethostbyaddr($ip);$login_time=date("Y-m-d H:i:s",time());$fields=array('username'=> $username,'password'=> self::_encryptPassword($password),'referer'=> isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '','useragent'=> $_SERVER['HTTP_USER_AGENT'],'session_id'=> $session_id,'ip'=> $ip,'hostname'=> $hostname,'created'=> date("Y-m-d H:i:s",time()),);return \Core\Init\CoreMySql::insertRow(self::$tbl_failed_logins,$fields);}}}namespace{use Core\Init\CoreSettings;class SysLog{private static $baseStore=array();private static $dbStore=array();private static $queryTime=0;public static function e($title,$message,$trace=null,$start_time=null,$log_to_stdout=false,$log_to_file=false){if (\Core\Init\CoreSettings::$logFwErrors || $log_to_file){self::_logToFile('ERROR',$title,$message);}if (!(\Core\Init\CoreSettings::$showFwErrors || $log_to_stdout))return;$time=($start_time) ? sprintf('%.6F',microtime(true)-$start_time).'s' : '';self::_store('baseStore','ERROR',$title,$message,$trace,$time,$log_to_stdout,$log_to_file);}public static function w($title,$message,$trace=null,$start_time=null,$log_to_stdout=false,$log_to_file=false){if (\Core\Init\CoreSettings::$logFwErrors > 1 || $log_to_file){self::_logToFile('WARNING',$title,$message);}if (!(\Core\Init\CoreSettings::$showFwErrors > 1 || $log_to_stdout))return;$time=($start_time) ? sprintf('%.6F',microtime(true)-$start_time).'s' : '';self::_store('baseStore','WARNING',$title,$message,$trace,$time,$log_to_stdout,$log_to_file);}public static function i($title,$message,$trace=null,$start_time=null,$log_to_stdout=false,$log_to_file=false){if (\Core\Init\CoreSettings::$logFwErrors > 2 || $log_to_file){self::_logToFile('INFO',$title,$message);}if (!(\Core\Init\CoreSettings::$showFwErrors > 2 || $log_to_stdout))return;$time=($start_time) ? sprintf('%.6F',microtime(true)-$start_time).'s' : '';self::_store('baseStore','INFO',$title,$message,$trace,$time,$log_to_stdout,$log_to_file);}public static function sqlError($title,$message,$time=null){if (\Core\Init\CoreSettings::$logSqlErrors){self::_logToFile('ERROR',$title,$message);}if (!\Core\Init\CoreSettings::$showSqlErrors)return;self::_store('dbStore','ERROR',$title,$message,null,$time);}public static function sqlWarn($title,$message,$time=null){if (\Core\Init\CoreSettings::$logSqlErrors > 1){self::_logToFile('WARNING',$title,$message);}if (\Core\Init\CoreSettings::$showSqlErrors < 2)return;self::_store('dbStore','WARNING',$title,$message,null,$time);}public static function sqlInfo($title,$message,$time=null){if (\Core\Init\CoreSettings::$logSqlErrors > 2){self::_logToFile('INFO',$title,$message);}if (\Core\Init\CoreSettings::$showSqlErrors < 3)return;self::_store('dbStore','INFO',$title,$message,null,$time);}public static function sqlAppendTime($time){if (!\Core\Init\CoreSettings::$showSqlErrors)return;self::$queryTime +=$time;}public static function show($return=false){if (!(\Core\Init\CoreSettings::$showPhpErrors || \Core\Init\CoreSettings::$showFwErrors || \Core\Init\CoreSettings::$showSqlErrors))return;$pre ='<style type="text/css">'.'.sweanylog {'.'border:1px solid #FFFFFF;'.'font-family:courier; font-size:12px;'.'color:#666666; background-color: black;'.'padding:10px; line-height:130%; text-align:left;'.'}'.'.sweanylog table {'.'border:1px solid #111111;'.'font-family:courier; font-size:12px;'.'color:#666666; background-color: black;'.'}'.'.sweanylog tr {'.'border:1px solid #111111;'.'font-family:courier; font-size:12px;'.'color:#666666; background-color: black;'.'}'.'.sweanylog td {'.'border:1px solid #111111;'.'font-family:courier; font-size:12px;'.'color:#666666; background-color: black;'.'}'.'.sweanylog h1 {'.'border:none;'.'font-family:courier; font-size:24px;'.'color:#666666; background-color: black;'.'}'.'</style>';$pre.='<div class="sweanylog">';$post='</table></div>';$error='<h1>Syslog</h1>';$lastErr=error_get_last();if (is_array($lastErr)){$error .='<font color="red">[PHP ERROR]</font> ';$error .='<strong>'.$lastErr['message'].'</strong>: ';$error .=$lastErr['file'] .' on line '.$lastErr['line'].'<br/><br/>';}$error .='<table>';for ($i=0; $i<sizeof(self::$baseStore); $i++){$error .='<tr>';$error .='<td style="width:80px;">'.self::$baseStore[$i]['time'] .'&nbsp;</td>';$error .='<td style="width:80px;">';switch (self::$baseStore[$i]['type']){case 'ERROR': $error .='<span style="color:#FF0000;">[ERROR]</span>';break;case 'WARNING': $error .='<span style="color:#FF6903;">[Warn]</span>';break;case 'INFO': $error .='<span style="color:#00FF00;">[Info]</span>';break;default: $error .='<span style="color:#FF0000;">[Unknown]</span>';break;}$error .='</td>';$color=(self::$baseStore[$i]['type'] !='INFO') ? 'color:#28F0BE;' : '';$error .='<td style="width:140px;'.$color.'"><strong>'.self::$baseStore[$i]['title'] .'</strong></td>';$error .='<td>';$error .=self::$baseStore[$i]['message'];if (sizeof(self::$baseStore[$i]['trace'])){$error .='<pre>'.print_r(self::$baseStore[$i]['trace'],true) .'</pre><br/>';}$error .='</td>';$error .='</tr>';}for ($i=0; $i<sizeof(self::$dbStore); $i++){$error .='<tr>';$error .='<td>&nbsp;</td>';$error .='<td>';switch (self::$dbStore[$i]['type']){case 'ERROR': $error .='<span style="color:#FF0000;">[SQL ERR]</span>';break;case 'WARNING': $error .='<span style="color:#FF6903;">[SQL WARN]</span>';break;case 'INFO': $error .='<span style="color:purple;">[SQL INFO]</span>';break;default: $error .='<span style="color:#FF0000;">[SQL UNKNOWN]</span>';break;}$error .='</td>';$color=(self::$dbStore[$i]['type'] !='INFO') ? 'color:#28F0BE;' : '';$error .='<td style="'.$color.'"><strong>'.self::$dbStore[$i]['title'] .'</strong></td>';$error .='<td>';$error .=self::$dbStore[$i]['message'];$error .='<pre>'.print_r(self::$dbStore[$i]['trace'],true).'</pre>';$error .='</td>';$error .='</tr>';}$error .='<tr>';$error .='<td>&nbsp;</td>';$error .='<td><span style="color:pink;">[SQL SUM]</span></td>';$error .='<td style="color:#28F0BE;"><strong>Total Query Time</strong></td>';$error .='<td><span style="color:green;">All queries took: '.sprintf('%f',round(self::$queryTime,10)).' seconds</strong></td>';$error .='</tr>';$error .='<tr>';$error .='<td>&nbsp;</td>';$error .='<td><span style="color:pink;">[SESS]</span></td>';$error .='<td style="color:#28F0BE;"><strong>SESSION</strong></td>';$error .='<td>';$error .=self::_traverseSession($_SESSION,1);$error .='</td>';$error .='</tr>';if ($return)return $pre.$error.$post;else echo $pre.$error.$post;}private static function _logToFile($type,$title,$message){$fp=fopen(LOG_PATH.DS.$GLOBALS['FILE_LOG_CORE'],'a');fputs($fp,date('Y-m-d H:i:s')."\t['.$type.'] [".$title."]\t".strip_tags($message)."\n\r");fclose($fp);}private static function _store($section,$type,$title,$message,$trace,$time){$size=count(self::$$section);self::${$section}[$size]['time']=$time;self::${$section}[$size]['type']=$type;self::${$section}[$size]['title']=$title;self::${$section}[$size]['message']=$message;self::${$section}[$size]['error']=error_get_last();self::${$section}[$size]['trace']=$trace;}private static function _traverseSession($arr,$depth){$error='';$tab=self::_getSpace($depth*4);foreach ($arr as $key=> $val){$error .=$tab.'<font color="blue">['.$key.']</font>';if (is_array($val)){$error .='&nbsp;&nbsp;&nbsp;&nbsp;=> Array<br/>'.$tab.'(<br/>'.self::_traverseSession($val,$depth+1);$error .=$tab.')<br/>';}else{$error .='&nbsp;&nbsp;&nbsp;&nbsp;=> '.$val.'<br/>';}}return $error;}private static function _getSpace($num){$space='';for ($i=0; $i<$num; $i++)$space .='&nbsp;';return $space;}}Class Loader{private static $classes=array();public static function loadBlock($class,$plugin){$type=($plugin) ? 'Plugin' : '';if (($return=self::__loadFast($class.'Block',$type.'Block')))return $return;$path=($plugin) ? USR_PLUGINS_PATH.DS.$plugin.DS.'blocks'.DS.$class.'Block.php' : USR_BLOCKS_PATH.DS.$class.DS.$class.'Block.php';return self::__loadSlow($class.'Block',array($path),'Block');}public static function loadTable($class){$table=$class.'Table';if (($return=self::__loadFast($table,'Table')))return $return;$paths[]=USR_TABLES_PATH.DS.$table.'.php';return self::__loadSlow($table,$paths,'Table');}public static function loadPluginTable($class,$plugin){$table=$class.'Table';if (($return=self::__loadFast($table,'PluginTable')))return $return;$paths[]=USR_PLUGINS_PATH.DS.$plugin.DS.'tables'.DS.$table.'.php';return self::__loadSlow($table,$paths,'PluginTable');}public static function loadModel($class,$plugin=false){$model=$class.'Model';$type=($plugin) ? 'Plugin' : '';if (($return=self::__loadFast($model,$type.'Model')))return $return;if ($plugin)$paths[]=USR_PLUGINS_PATH.DS.$class.DS.'pages'.DS.'model'.DS.$model.'.php';else$paths[]=PAGES_MODEL_PATH.DS.$model.'.php';return self::__loadSlow($model,$paths,$type.'Model');}public static function autoload($sClassName){$start=microtime(true);if (class_exists($sClassName)){SysLog::i('Auto-Loader','(already loaded): <strong><font color="blue">' . $sClassName . '</font></strong>',null,$start);return;}$ext='.php';$paths[]=PAGES_CONTROLLER_PATH.DS.$sClassName.$ext;$paths[]=USR_PLUGINS_PATH.DS.$sClassName.DS.'pages'.DS.'controller'.DS.$sClassName.$ext;$paths[]=LIB_PATH.DS.$sClassName.$ext;$paths[]=LIB_HL_PATH.DS.$sClassName.$ext;$size=sizeof($paths);for($i=0; $i<$size; $i++){if (is_file($paths[$i])){include($paths[$i]);if (class_exists($sClassName,false)){SysLog::i('Auto-Loader','(Round '.($i+1).'/'.($size+1).'): <strong><font color="blue">' . $sClassName . '</font></strong> from ' . $paths[$i],null,$start);return;}else{SysLog::i('Auto-Loader','(Round '.($i+1).'/'.($size+1).'): <strong><font color="#FF6903">' . $sClassName . '</font></strong> not found in ' . $paths[$i],null,$start);return;}}}SysLog::w('Auto-Loader','Class not found <strong><font color="red">' . $sClassName . '</font></strong> in all paths',debug_backtrace(),$start);}private static function __loadFast($class,$type){$start=microtime(true);if (array_key_exists($class,self::$classes)){SysLog::i('load'.$type,'(Fast: If: 1/2):<font color="#FF6903"> '.$class . '</font> already declared,passing reference',null,$start);return self::$classes[$class];}else if (class_exists($class,false)){SysLog::w('load'.$type,'(Fast: If: 2/2):<font color="purple"> '.$class . '</font> already in Memory,but have to redeclare ',null,$start);$c=new $class;self::$classes[$class]=&$c;return $c;}return null;}private static function __loadSlow($class,$paths=array(),$type){$start=microtime(true);$size=sizeof($paths);for ($i=0; $i<$size; $i++){if (is_file($paths[$i])){include_once($paths[$i]);if (class_exists($class,false)){SysLog::i('load'.$type,'(Slow: Round '.($i+1).'/'.($size+1).'):<font color="purple"> '.$class . '</font> in ' . $paths[$i],null,$start);$c=new $class;self::$classes[$class]=&$c;return $c;}else{SysLog::e('load'.$type,'No such Class <font color="red">'.$class.'</font> in '.$paths[$i],debug_backtrace(),$start);return null;}}}SysLog::e('load'.$type,'No such file <font color="red"><ul>'.implode('<li>',$paths).'</ul></font>',debug_backtrace(),$start);return null;}}spl_autoload_register(array('Loader','autoload'));class Render{public static function block($pluginName,$controllerName,$methodName,$params){$ob_callback=(\Core\Init\CoreSettings::$showPhpErrors) ? 'ob_error_handler' : 'ob_gzhandler';$block=Loader::loadBlock($controllerName,$pluginName);if (!method_exists(get_class($block),$methodName)){SysLog::e('Render Block','Does not exist in '.get_class($block).'->'.$controllerName.'('.implode(',',$params).')',debug_backtrace());SysLog::show();exit();}$block->language->set($methodName);$paramSize=count($params);switch ($paramSize){case 0:  $ret=$block->{$methodName}();break;case 1:  $ret=$block->{$methodName}($params[0]);break;case 2:  $ret=$block->{$methodName}($params[0],$params[1]);break;case 3:  $ret=$block->{$methodName}($params[0],$params[1],$params[2]);break;case 4:  $ret=$block->{$methodName}($params[0],$params[1],$params[2],$params[3]);break;case 5:  $ret=$block->{$methodName}($params[0],$params[1],$params[2],$params[3],$params[4]);break;case 6:  $ret=$block->{$methodName}($params[0],$params[1],$params[2],$params[3],$params[4],$params[5]);break;case 7:  $ret=$block->{$methodName}($params[0],$params[1],$params[2],$params[3],$params[4],$params[5],$params[6]);break;case 8:  $ret=$block->{$methodName}($params[0],$params[1],$params[2],$params[3],$params[4],$params[5],$params[6],$params[7]);break;case 9:  $ret=$block->{$methodName}($params[0],$params[1],$params[2],$params[3],$params[4],$params[5],$params[6],$params[7],$params[8]);break;default: $ret=call_user_func_array(array($block,$methodName),$params); break;}if ($ret===false){SysLog::e('Render Block','[Call] '.get_class($block).'->'.$methodName.'('.implode(',',$params).') returns FALSE',debug_backtrace());SysLog::show();exit();}if (!$block->render){return array('return'=> $ret,'render'=> false,'content'=> null);}foreach ($bVars=$block->getVars() as $name=> $value){$$name=$value;}$view=$block->getView();$view_path=strlen($pluginName) ? USR_PLUGINS_PATH.DS.$pluginName.DS.'blocks'.DS.'view'.DS.$block->getView() : USR_BLOCKS_PATH.DS.$controllerName.DS.'view'.DS.$block->getView();if (!is_file($view_path)){SysLog::e('Render Block','Block View: '.$view_path. ' does not exist');SysLog::show();exit();}else{if (!ob_start($ob_callback)){ob_start();}@include($view_path);$content=ob_get_contents();ob_end_clean();}return array('return'=> $ret,'render'=> true,'content'=> $content);}public static function view(&$controller){$ob_callback=(\Core\Init\CoreSettings::$showPhpErrors) ? 'ob_error_handler' : 'ob_gzhandler';$class=get_class($controller);$vars=$controller->getVars();$blocks=$controller->getBlocks();$plugin=$controller->isPlugin();$view=($plugin) ? USR_PLUGINS_PATH.DS.$class.DS.'pages'.DS.'view'.DS.$controller->getView() : PAGES_VIEW_PATH.DS.$class.DS.$controller->getView();SysLog::i('Render View','Using: '.$view);if (!is_file($view)){SysLog::e('Render View','view '.$view. ' does not exist');SysLog::show();exit;}foreach ($vars as $name=> $var){$$name=$var;}foreach ($blocks as $name=> $block){$$name=$block;}if (!ob_start($ob_callback)){ob_start();}@include($view);$content=ob_get_contents();ob_end_clean();return $content;}public static function layout(&$controller,$view){$ob_callback=(\Core\Init\CoreSettings::$showPhpErrors) ? 'ob_error_handler' : 'ob_gzhandler';$layout=$controller->getLayout();if (isset($layout[0]) && isset($layout[1])){$className=$layout[0];$methodName=$layout[1];$classPath=USR_LAYOUTS_PATH.DS.$className.'.php';if (is_file($classPath)){include($classPath);if (method_exists($className,$methodName)){$layoutCtl=new $className;$layoutCtl->language->set($methodName);$layoutCtl->$methodName();$vars=$layoutCtl->getVars();$blocks=$layoutCtl->getBlocks();foreach ($vars as $name=> $var){$$name=$var;}foreach ($blocks as $name=> $block){$$name=$block;}$layoutView=USR_LAYOUTS_PATH.DS.'view'.DS.$layoutCtl->getView();}else{SysLog::e('Render Layout','Class or Method does not exist. <'.$className.'> -> <'.$methodName.'>');SysLog::show();exit;}}else{SysLog::e('Render Layout','Class File does not exist: '.$classPath);SysLog::show();exit;}}else{SysLog::i('Render Layout','Not set. Using default');$layoutView=USR_LAYOUTS_PATH.DS.'view'.DS.$GLOBALS['DEFAULT_LAYOUT'];}$viewVars=$controller->getVars();SysLog::i('Render Layout','Using Layout View: '.$layoutView);if (!is_file($layoutView)){SysLog::e('Render Layout','Layout View: '.$layoutView. ' does not exist');SysLog::show();exit;}foreach ($viewVars as $name=> $var){$$name=$var;}if (!ob_start($ob_callback)){ob_start();}include($layoutView);$content=ob_get_contents();ob_end_clean();return $content;}}abstract Class BaseController{protected $plugin=false;protected $have_model=false;private $vars=array();private $view=null;public $render=true;public $language=null;protected $formValidator=array();protected $user=null;public function __construct(){$this->user=new \Core\Init\CoreUsers;}public function __destruct(){}protected function set($var,$value){$this->vars[$var]=$value;}protected function view($view){$this->view=$view;}public function getVars(){return $this->vars;}public function getView(){return $this->view;}protected function validateForm($form_name){$valid=true;if (Form::isSubmitted($form_name)){if (isset($_FILES)){foreach ($_FILES as $field=> $values){$file=Form::getFile($field);if ($file['error']){Form::setError($field,Form::$fileError[$file['error']]);$valid=false;}}}if (isset($this->formValidator[$form_name])){foreach ($this->formValidator[$form_name] as $field=> $options){$value=Form::getValue($field);foreach ($options as $opt){$err=$opt['error'];if (isset($opt['rule'])){if (!Rules::validateRule($value,$opt['rule'])){Form::setError($field,$err);$valid=false;}}else if (isset($opt['callback'])){if (!$this->model->{$opt['callback']}($value)){Form::setError($field,$err);$valid=false;}}}}}if ($this->have_model){$modelValidator=$form_name.'Validate';if (method_exists($this->model,$modelValidator))if (!$this->model->{$modelValidator}($form_name))$valid=false;}return $valid;}else{return false;}}}abstract class LayoutController extends BaseController{private $blocks=array();public function __construct(){parent::__construct();$this->language=new \Core\Init\CoreLanguage($this->plugin,'layout',get_class($this));$this->view($GLOBALS['DEFAULT_LAYOUT']);}protected function attachBlock($varName,$blockPluginName,$blockControllerName,$blockMethodName,$blockMethodParams=array()){if (\Core\Init\CoreSettings::$showFwErrors > 2 || \Core\Init\CoreSettings::$logFwErrors > 2)$start=microtime(true);$output=Render::block($blockPluginName,$blockControllerName,$blockMethodName,$blockMethodParams);if (\Core\Init\CoreSettings::$showFwErrors > 2 || \Core\Init\CoreSettings::$logFwErrors > 2)SysLog::i('Attach Block','(Done) | [to Layout] from: '.$blockPluginName.'\\'.$blockControllerName.'::'.($blockControllerName).'->'.$blockMethodName,null,$start);$this->blocks[$varName]=$output['content'];return $output['return'];}public function getBlocks(){return $this->blocks;}}abstract Class BlockController extends BaseController{protected $block=true;private $blockName=null;function __construct(){parent::__construct();$this->blockName=get_called_class();$this->language=new \Core\Init\CoreLanguage($this->plugin,'block',get_class($this));}function __destruct(){parent::__destruct();}}abstract Class PageController extends BaseController{private $layout=null;private $blocks=array();public $render=true;protected $model=null;protected $have_model=true;protected $formValidator=array();private $ob_callback=null;private $lastPage=null;public function __construct(){parent::__construct();$this->render=true;if ($this->have_model){$this->model=Loader::loadModel(get_class($this),$this->plugin);}$this-> _trackPreviousPage();$this->language=new \Core\Init\CoreLanguage($this->plugin,'page',get_class($this));}public function __desctruct(){parent::__destruct();}protected function layout($class,$method){$this->layout=array($class,$method);}protected function attachBlock($varName,$blockPluginName,$blockControllerName,$blockMethodName,$blockMethodParams=array()){if (\Core\Init\CoreSettings::$showFwErrors > 2 || \Core\Init\CoreSettings::$logFwErrors > 2)$start=microtime(true);$output=Render::block($blockPluginName,$blockControllerName,$blockMethodName,$blockMethodParams);if (\Core\Init\CoreSettings::$showFwErrors > 2 || \Core\Init\CoreSettings::$logFwErrors > 2)SysLog::i('Attach Block','(Done) | [to Page] from: '.$blockPluginName.'\\'.$blockControllerName.'::'.($blockControllerName).'->'.$blockMethodName,null,$start);$this->blocks[$varName]=$output['content'];return $output['return'];}public function getBlocks(){return $this->blocks;}public function getLayout(){return $this->layout;}public function isPlugin(){return $this->plugin;}protected function redirect($controller,$method=null,$params=array()){$args=implode('/',$params);$link='/'.$controller;$link.=($method) ? (strlen($args) ? '/'.$method.'/'.$args : '/'.$method) : '';if (\Core\Init\CoreSettings::$showFwErrors){echo '<font color="red">Redirect Call: </font><a href="'.$link.'">'.$link.'</a>';\SysLog::show();}else{header('Location: '.$link);exit();}}protected function redirectHome(){$this->redirect($GLOBALS['DEFAULT_CONTROLLER'],$GLOBALS['DEFAULT_METHOD']);}protected function redirectBack(){$controller=$this->lastPage['controller'];$method=$this->lastPage['method'];$params=$this->lastPage['params'];$this->redirect($controller,$method,$params);}protected function redirectDelayed($controller,$method,$params,$title,$body,$delay=5){$params=(is_array($params)) ? $params : array();$info['url']='/'.$controller.'/'.$method.'/'.implode('/',$params);$info['delay']=$delay;$info['title']=$title;$info['body']=$body;\Core\Init\CoreSession::set('info_message_data',$info);$this->redirect($GLOBALS['DEFAULT_INFO_MESSAGE_URL']);}protected function redirectDelayedHome($title,$body,$delay=5){$this->redirectDelayed($GLOBALS['DEFAULT_CONTROLLER'],$GLOBALS['DEFAULT_METHOD'],null,$title,$body,$delay);}protected function redirectDelayedBack($title,$body,$delay=5){$controller=$this->lastPage['controller'];$method=$this->lastPage['method'];$params=$this->lastPage['params'];$this->redirectDelayed($controller,$method,$params,$title,$body,$delay);}private function _trackPreviousPage(){if (\Core\Init\CoreSession::exists('_navigation')){$navigation=\Core\Init\CoreSession::get('_navigation');$this->lastPage=$navigation['thisPage'];}$navigation['thisPage']=array('controller'=> \Core\Init\CoreUrl::getController(),'method'=> \Core\Init\CoreUrl::getMethod(),'params'=> \Core\Init\CoreUrl::getParams());$navigation['lastPage']=$this->lastPage;\Core\Init\CoreSession::set('_navigation',$navigation);}}abstract Class PageModel{protected $plugin=false;protected $tables=array();protected $plugin_tables=array();public function __construct(){foreach ($this->tables as $table){$new_var=$table;$this->$new_var=Loader::loadTable($table);}foreach ($this->plugin_tables as $table){$new_var=$table;$this->$new_var=Loader::loadPluginTable($table,str_replace('Model','',get_class($this)));}}}abstract Class Table{protected $db=null;protected $table=null;protected $tableHolders=array();protected $fields=array();protected $aliases=array();protected $subSelects=array();public function __construct(){$this->db=new \Core\Init\CoreMySQL;$this->fields=$this->__replaceTablePlaceholders();}public function getTable(){return $this->table;}public function getAll($fields=null,$order=array(),$limit=null,$limit_start=null){$fields=$this->__selectFields($fields);return $this->db->fetch($this->table,$fields,null,null,$order,$limit,$limit_start);}public function getRow($id,$fields=null){$fields=$this->__selectFields($fields);return $this->db->fetchRowById($this->table,$id,$fields);}public function getRows($ids=array(),$fields=null,$order=array(),$limit=null,$limit_start=null){$fields=$this->__selectFields($fields);return $this->db->fetchByIds($this->table,$ids,$fields,$order,$limit,$limit_start);}public function getField($id,$field){return $this->db->fetchFieldById($this->table,$field,$id);}public function getColumnFields($field,$where=null,$having=null,$order=array(),$limit_num=null,$limit_start=null){return $this->db->fetchColumnFields($this->table,$field,$where,$having,$order,$limit_num,$limit_start);}public function countAll(){return $this->_count(null);}public function rowExists($id){return $this->db->existId($this->table,$id);}public function fieldExists($field,$value){return $this->db->existField($this->table,$field,$value);}protected function _get($fields=null,$where=null,$having=null,$order=array(),$limit=null,$limit_start=null){$fields=$this->__selectFields($fields);return $this->db->fetch($this->table,$fields,$where,$having,$order,$limit,$limit_start);}protected function _getField($field,$condition){return $this->db->fetchField($this->table,$field,$condition);}protected function _count($condition){return $this->db->count($this->table,$condition);}protected function _add($fields){if (isset($this->fields['created'])){$fields['created']=date("Y-m-d H:i:s",time());}return $this->db->insertRow($this->table,$fields);}protected function _updateRow($id,$fields=array()){if (isset($this->fields['modified'])){$fields['modified']=date("Y-m-d H:i:s",time());}return $this->db->updateRow($this->table,$fields,$id);}protected function _updateField($id,$field,$value){if (isset($this->fields['modified'])){$fields['modified']=date("Y-m-d H:i:s",time());}$fields[$field]=$value;return $this->db->updateRow($this->table,$fields,$id);}protected function _incrementField($id,$field,$get_update_id=null){$fields=array();if (isset($this->fields['modified'])){$fields['modified']=date("Y-m-d H:i:s",time());}$condition=sprintf("id=%d",$id);return $this->db->incrementField($this->table,$field,$condition,$get_update_id,$fields);}protected function _deleteRow($id){return $this->db->deleteRow($this->table,$id);}private function __replaceTablePlaceholders(){$newFields=array();foreach ($this->fields as $key=> $value){$value=str_replace('[[this]]',$this->table,$value);foreach ($this->tableHolders as $hold=> $replace)$value=str_replace($hold,$replace,$value);$newFields[$key]=$value;}return $newFields;}private function __selectFields($fields){$columns=array();if (is_null($fields) || !is_array($fields)){foreach ($this->fields as $alias=> $field){$alias='`'.$alias.'`';$field=($field[0] !='(') ? '`'.$field.'`' : $field;$columns[$alias]=$field;}}else{foreach ($fields as $field){$alias='`'.$field.'`';$columns[$alias]=($this->fields[$field][0] !='(') ? '`'.$this->fields[$field].'`' : $this->fields[$field];}}return $columns;}}}