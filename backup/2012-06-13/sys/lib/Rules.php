<?phpclass Rules{	// used to validate a class defined rules	public static function validateRule($value, $rule)	{		$function	= $rule[0];		$params		= isset($rule[1]) ? $rule[1] : NULL;		return call_user_func_array(array('Rules', $function), array($value, $params));	}	/**************************************************** URL PARAM RULES ****************************************************/	public static function equalsUrlParam($value, $paramPosition)	{		$urlParams	= Url::getParams();		if ( !isset($urlParams[$paramPosition]) )			return false;		return ( $value == $urlParams[$paramPosition] );	}	/**************************************************** INTEGER RULES ****************************************************/	public static function isNumber($value)	{		return (bool) preg_match('/^[0-9]+$/', $value);	}	public static function between($value, $offsets = array())	{		$low	= $offsets[0];		$high	= $offsets[1];		return ( $value >= $low && $value <= $high );	}	public static function equals($value, $number)	{		return ( $value == $number );	}	/**************************************************** STRING RULES ****************************************************/	public static function strcmpOr($value, $strArr)	{		$equals = false;		foreach ($strArr as $needle)			if ($value == $needle)				$equals = true;		return $equals;	}	public static function minLen($value, $length)	{		return ( strlen($value) >= $length );	}	public static function maxLen($value, $length)	{		return ( strlen($value) <= $length );	}	public static function isHex($value)	{		return preg_match("/^[a-f0-9]{1,}$/is", $value);	}	public static function isEmail($value)	{		return (bool) filter_var($value, FILTER_VALIDATE_EMAIL);	}	public static function isUrl($value)	{		return (bool) filter_var($value, FILTER_VALIDATE_URL);	}	public static function isIp($value)	{		return (bool) filter_var($value, FILTER_VALIDATE_IP);	}	public static function isAlphaNumeric($value)	{		return (bool) preg_match('/^[A-Za-z0-9_]+$/', $value);	}	public static function isAlphabetOnly($value)	{		if (!strlen($value))			return true;		return (bool) preg_match('/^[A-Za-z ]+$/', $value);	}	public static function isAlphabetWithoutSpace($value)	{		if (!strlen($value))			return true;		return (bool) preg_match('/^[A-Za-z]+$/', $value);	}	/**************************************************** ARRAY RULES ****************************************************/	public static function isArray($value)	{		return ( is_array($value) );	}	public static function minSize($value, $length)	{		return ( sizeof($value) > $length );	}	public static function maxSize($value, $length)	{		return ( sizeof($value) < $length );	}}