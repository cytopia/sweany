<?phpabstract Class BaseController{	/* ***************************************************** VARIABLES ***************************************************** */	protected $block = false;	/*	 * The following will define the Variables, View Layout and Blocks	 * to use	 */	private $vars	= array();	// all variables parsed to the view	private $view	= null;		// the view itself to use	/*	 * If not overwritten, it will be rendered	 * into a normal view and be placed in the layout	 *	 * If you do AJAX request and want to parse raw data	 * or json, you set this to false	 */	public $render	= true;	/*	 * The array filled by each controller	 * to validate forms automatically	 * with pre-defined validators	 * found in Rules.php, custom functions	 * and/or a <form_name>Validate() function	 * in the model	 */	protected $formValidator = array();	/**	 * Required Classes	 */	protected $model	= null;		// model	/**	 * The following vars are responsible to	 * load extra classed needed by the controller	 */	protected $helpers	= array();	// helper (html, form, user, css, email, etc) - available in controller and view	/* ***************************************************** CONSTRUCTOR ***************************************************** */	public function __construct()	{		/*		* Initialize the Model		*		* Do not let the autoloader handle this (via = new Model)		* as the 'loadModel' function is optimized and much faster than the auto-loader.		* loadModel usually only takes 1 round.		*		* The default loadModel is to not use the block model		* There fore $this->blocks needs to be true in the BlockController		*/		$this->model	= Loader::loadModel(get_class($this), $this->block);		$this->user		= new Users;		// initialize helper		foreach ($this->helpers as $helper)		{			$new_var		= strtolower($helper);			$this->$new_var = Loader::loadHelper($helper);		}	}	public function __destruct()	{	}	/* ***************************************************** CONTROLLER SETTER ***************************************************** */	protected function set($var, $value)	{		$this->vars[$var] = $value;	}	protected function view($view)	{		$this->view = $view;	}	/* ***************************************************** INDEX GETTER ***************************************************** */	public function getVars()	{		return $this->vars;	}	public function getHelpers()	{		$var = array();		foreach ($this->helpers as $helper)		{			$class			= strtolower($helper);			$var[$class]	= &$this->$class;		}		return $var;	}	public function getView()	{		return $this->view;	}	/* ***************************************************** AUTO-FORM VALIDATOR ***************************************************** */	protected function validateForm($form_name)	{		$valid = true;		if ( $this->form->isSubmitted($form_name) )		{			//----------- (01.) VALIDATE FILE UPLOADS			if ( isset($_FILES) )		{			foreach ($_FILES as $field => $values)			{				$file = $this->form->getFile($field);				if ( $file['error'] )				{					$this->form->setError($field, $this->form->fileError[$file['error']]);					$valid = false;				}			}		}		//----------- (0.2) VALIDATE SPECIFIED FORM RULES/CALLBACKS		if ( isset($this->formValidator[$form_name]) )		{			foreach ( $this->formValidator[$form_name] as $field => $options )			{				$value = $this->form->getValue($field);				foreach ($options as $opt)				{					$err = $opt['error'];					if ( isset($opt['rule']) )					{						if ( !Rules::validateRule($value, $opt['rule']) )						{							$this->form->setError($field, $err);							$valid = false;						}					}					else if ( isset($opt['callback']) )					{						if ( !call_user_func_array(array($this->model, $opt['callback']), array($value)) )						{							$this->form->setError($field, $err);							$valid = false;						}					}				}			}		}		// check if model has a rule for this form		// <formName>Validate(&$form)		// and call if it does		$modelValidator = $form_name.'Validate';		if ( method_exists($this->model, $modelValidator) )		if ( !call_user_func_array(array($this->model, $modelValidator), array(&$this->form)) )		$valid = false;		// if nothing has happened, return true		return $valid;		}		// not submitted		else		{			return false;		}	}}?>