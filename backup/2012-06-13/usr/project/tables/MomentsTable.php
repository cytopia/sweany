<?phpclass MomentsTable extends Table{	protected $table	= 'moments';	protected $fields	= array(		'id'						=> 'id',		'fk_user_id'				=> 'fk_user_id',		'addr_place_name'			=> 'addr_place_name',		'addr_street_num'			=> 'addr_street_num',		'addr_street'				=> 'addr_street',		'addr_zipcode'				=> 'addr_zipcode',		'addr_district'				=> 'addr_district',		'addr_city'					=> 'addr_city',		'addr_state'				=> 'addr_state',		'addr_country'				=> 'addr_country',		'addr_readable'				=> 'addr_readable',		'addr_lat'					=> 'addr_lat',		'addr_lng'					=> 'addr_lng',		'addr_sv_lat'				=> 'addr_sv_lat',		'addr_sv_lng'				=> 'addr_sv_lng',		'addr_sv_heading'			=> 'addr_sv_heading',		'addr_sv_fov'				=> 'addr_sv_fov',		'addr_sv_pitch'				=> 'addr_sv_pitch',		'moment_title'				=> 'moment_title',		'moment_message'			=> 'moment_message',		'moment_date'				=> 'moment_date',		'moment_hour_from'			=> 'moment_hour_from',		'moment_hour_to'			=> 'moment_hour_to',		'me_image'					=> 'me_image',		'me_gender'					=> 'me_gender',		'me_name'					=> 'me_name',		'me_age'					=> 'me_age',		'me_height'					=> 'me_height',		'me_haircolor'				=> 'me_haircolor',		'you_image'					=> 'you_image',		'you_gender'				=> 'you_gender',		'you_name'					=> 'you_name',		'you_age_from'				=> 'you_age_from',		'you_age_to'				=> 'you_age_to',		'you_height_from'			=> 'you_height_from',		'you_height_to'				=> 'you_height_to',		'you_haircolor'				=> 'you_haircolor',		'view_count'				=> 'view_count',		'is_featured_qualified'		=> 'is_featured_qualified',		'is_of_the_day_qualified'	=> 'is_of_the_day_qualified',		'seo_tags'					=> 'seo_tags',		'seo_url'					=> 'seo_url',		'tiny_url'					=> 'tiny_url',		'created'					=> 'created',		'modified'					=> 'modified',		'username'					=> '(SELECT username FROM users WHERE id=fk_user_id)',		'comment_count'				=> '(SELECT COUNT(id) FROM moment_comments WHERE fk_moment_id = moments.id)',	);	public function add($data = array())	{		$moment_id =  $this->_add($data);		$long_url	= 'http://'.$_SERVER['SERVER_NAME'].DS.Link::ctl('momentsDetails').DS.Link::method('momentsDetails').DS.$moment_id.DS.$data['seo_url'];		$tiny_url	= $this->_get_tiny_url($long_url);		$this->updateMoment($moment_id, array('tiny_url' => $tiny_url));		return $moment_id;	}	public function incrementViewCount($moment_id)	{		$this->_incrementField($moment_id, 'view_count');	}	public function isMyMoment($moment_id, $user_id)	{		$condition = sprintf('`id` = %d AND `fk_user_id` = %d', $moment_id, $user_id);		return $this->_count($condition);	}	public function getAllByUserId($user_id)	{		$where = sprintf('`fk_user_id` = %d', $user_id);		return $this->_get(NULL, $where, NULL, array('created' => 'DESC'));	}	public function getLowestDate()	{		$data =  Mysql::select('SELECT MIN(moment_date) AS min_date FROM '.$this->table);		return $data[0]['min_date'];	}	public function getHighestDate()	{		$data =  Mysql::select('SELECT MAX(moment_date) AS min_date FROM '.$this->table);		return $data[0]['min_date'];	}	public function get($fields = NULL, $where = NULL, $having = NULL, $order = NULL, $limit = NULL, $limit_start = NULL)	{		return $this->_get($fields, $where, $having, $order, $limit, $limit_start);	}	public function getUniqueCitiesFrequentOrder($limit = null)	{		$limit = (!is_null($limit)) ? ' LIMIT '.$limit : '';		return Mysql::select("SELECT DISTINCT(addr_city) FROM $this->table GROUP BY addr_city ORDER BY COUNT(addr_city) DESC $limit");	}	public function getUniqueCitiesNameOrder($limit = null)	{		$limit = (!is_null($limit)) ? ' LIMIT '.$limit : '';		return Mysql::select("SELECT DISTINCT(addr_city) FROM $this->table ORDER BY addr_city ASC $limit");	}	public function exists($moment_id)	{		return $this->_count(sprintf('`id` = %d', $moment_id));	}	public function count($where)	{		return $this->_count($where);	}	/*	 * Here we need to check if everything is filled out	 * If Yes: set qualified fields to true	 *	 */	public function updateMoment($id, $fields)	{		$this->_updateRow($id, $fields);		return $this->isFullyFilled($id);	}	public function deleteMoment($id)	{		return $this->_deleteRow($id);	}	private function isFullyFilled($id)	{		$m = $this->getRow($id);		// If Moment is qualified		if ( strlen($m['moment_title']) > 0 &&			 strlen($m['moment_message']) > 0 &&			 strlen($m['addr_place_name']) > 0 &&			 strlen($m['me_image']) > 0 &&			 strlen($m['me_name']) > 0 &&			 $m['me_gender'] > 0 &&			 $m['me_age'] > 0 &&			 $m['me_height'] > 0 &&			 $m['me_haircolor'] > 0 &&			 strlen($m['you_image']) > 0 &&			 $m['you_gender'] > 0 &&			 ( $m['you_age_from']>0 || $m['you_age_to']>0 ) &&			 ( $m['you_height_from']>0 || $m['you_height_to']>0 ) &&			 $m['you_haircolor'] > 0 &&			 strlen($m['seo_tags']) > 0 )		{			return $this->_updateRow($id, array('is_featured_qualified' => 1, 'is_of_the_day_qualified' => 1));		}		else		{			return $this->_updateRow($id, array('is_featured_qualified' => 0, 'is_of_the_day_qualified' => 0));		}	}	//gets the data from a URL	private function _get_tiny_url($url)	{		$ch = curl_init();		$timeout = 5;		curl_setopt($ch,CURLOPT_URL,'http://tinyurl.com/api-create.php?url='.$url);		curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);		curl_setopt($ch,CURLOPT_CONNECTTIMEOUT,$timeout);		$data = curl_exec($ch);		curl_close($ch);		return $data;	}}?>