<?phpabstract Class Controller{	/* ***************************************************** VARIABLES ***************************************************** */	/*	* Determines whether this controller is a 'package' Controller	* If yes, we have to load the view from a different	* location	*/	public $package = null;	/*	 * The following will define the Variables, View Layout and Blocks	 * to use	 */	private $vars	= array();	// all variables parsed to the view	private $view	= null;		// the view itself to use	private $layout	= null;		// the layout file to render the view into	private $blocks	= array();	// pre-rendered blocks (if any)	/*	 * If not overwritten, it will be rendered	 * into a normal view and be placed in the layout	 *	 * If you do AJAX request and want to parse raw data	 * or json, you set this to false	 */	public $render	= true;	/*	 * The array filled by each controller	 * to validate forms automatically	 * with pre-defined validators	 * found in Rules.php, custom functions	 * and/or a <form_name>Validate() function	 * in the model	 */	protected $formValidator = array();	/**	 * Required Classes	 */	protected $model	= null;		// model	protected $user		= null;		// user	/**	 * The following vars are responsible to	 * load extra classed needed by the controller	 */	protected $helpers	= array();	// helper (html, form, css, email, etc) - available in controller and view	private static $serialized 			= array();	/*	 *  callback type used for the $ob_handler	 *  In Debug Mode we still want to be able to see errors	 *  In Production Mode we try to use compression	 *  (see constructor)	 */	private $ob_callback = null;	/* ***************************************************** CONSTRUCTOR ***************************************************** */	public function __construct()	{		// set auto render to true		$this->render	= true;		// set default layout defined in config.php		$this->layout	= $GLOBALS['HTML_DEFAULT_LAYOUT'];		/*		 *  initialize the callback function here once		 *  otherwise we would need to check every time		 *  attachBlock is called		 *  In production mode we try to use compression from ob_gzhandler		 */		$this->ob_callback = (Settings::$debugLevel) ? null : 'ob_gzhandler';		/*		 * Initialize the Model		 *		 * Do not let the autoloader handle this (via = new Model)		 * as the 'loadModel' function in conjunction with auto-package		 * detection is optimized and much faster than the auto-loader.		 * loadModel usually only takes 1 round.		 *		 * By also removing the 'classModel' from the auto-loader, we		 * reduce the autoloader loop by factor 1 */		$this->model	= Loader::loadModel(get_class($this), $this->package);		$this->user		= new Users;		// initialize helper		foreach ($this->helpers as $helper)		{			$new_var		= strtolower($helper);			$this->$new_var = Loader::loadHelper($helper);		}	}	/* ***************************************************** CONTROLLER SETTER ***************************************************** */	protected function set($var, $value)	{		$this->vars[$var] = $value;	}	protected function view($view)	{		$this->view = $view;	}	protected function layout($layout)	{		$this->layout = $layout;	}	protected function attachBlock($varName, $package = null, $blockControllerName, $blockMethodName, $blockMethodParams = array())	{		if ( Settings::$debugLevel )			$start = getmicrotime();		// 01) Load in instantiate block		$block = Loader::loadBlock($blockControllerName, $package);		if (  !class_exists($blockControllerName.'Block') )		{			$err_pkg = ($package) ? ' pkg: '.$package.' ' : '';			Log::setError('Attach Block', 'Error in '.$err_pkg.$blockControllerName.'->'.$blockMethodName.'('.implode(',', $blockMethodParams).')', debug_backtrace());			return;		}		// 03) execute the block		if ( ($ret = call_user_func_array(array($block, $blockMethodName), $blockMethodParams)) === false)		{			$err_pkg = ($package) ? ' pkg: '.$package.' ' : '';			Log::setError('Attach Block', 'Error in '.$err_pkg.$blockControllerName.'->'.$blockMethodName.'('.implode(',', $blockMethodParams).')', debug_backtrace());			return;		}		// 04) set view variables		foreach ($bVars	= $block->getVars() as $name => $value)			$$name = $value;		// 05) get View		$view		= $block->getView();		$view_path	= ($package) ? PACKAGES.DS.$package.DS.'block'.DS.'view'.DS.$view: BLOCK.DS.$blockControllerName.DS.'view'.DS.$block->getView();		if (!is_file($view_path))		{			Log::setError('BlockView', $view_path. ' does not exist');			Log::show();			exit;		}		// 06) RENDER		// Turn on output buffering		// TODO: handle debug mode, so that errors will be displayed!!		if ( !ob_start($this->ob_callback) )		{			ob_start();		}		include($view_path);		$content = ob_get_contents();		// 07) Clean (erase) the output buffer and turn off output buffering		ob_end_clean();		// 08) store block into array		$this->blocks[$varName]['return']	= $ret;		$this->blocks[$varName]['content']	= $content;		// 09 Restore Header		//		// In case the block Controller did set a custom header e.g,		// header("Content-Type: image/png"); then it will still be active here		// so we have to restore it		// TODO:		//header('Content-type: text/html; charset=UTF-8');		if ( Settings::$debugLevel )			Log::setInfo('Render Block', $package.'::'.$blockControllerName.'->'.$blockMethodName, null, $start);	}	/* ***************************************************** INDEX GETTER ***************************************************** */	public function getVars()	{		return $this->vars;	}	public function getBlocks()	{		return $this->blocks;	}	public function getView()	{		return $this->view;	}	public function getLayout()	{		return LAYOUT.DS.$this->layout;	}	public function getHelper()	{		foreach ($this->helpers as $helper)		{			$class	= strtolower($helper);			$s		= serialize($this->$class);			self::$serialized[$class] = $s;		}		return self::$serialized;	}	/* ***************************************************** AUTO-FORM VALIDATOR ***************************************************** */	protected function validateForm($form_name)	{		$valid = true;		if ( $this->form->isSubmitted($form_name) )		{			//----------- (01.) VALIDATE FILE UPLOADS			if ( isset($_FILES) )			{				foreach ($_FILES as $field => $values)				{					$file = $this->form->getFile($field);					if ( $file['error'] )					{						$this->form->setError($field, $this->form->fileError[$file['error']]);						$valid = false;					}				}			}			//----------- (0.2) VALIDATE SPECIFIED FORM RULES/CALLBACKS			if ( isset($this->formValidator[$form_name]) )			{				foreach ( $this->formValidator[$form_name] as $field => $options )				{					$value = $this->form->getValue($field);					foreach ($options as $opt)					{						$err = $opt['error'];						if ( isset($opt['rule']) )						{							if ( !Rules::validateRule($value, $opt['rule']) )							{								$this->form->setError($field, $err);								$valid = false;							}						}						else if ( isset($opt['callback']) )						{							if ( !call_user_func_array(array($this->model, $opt['callback']), array($value)) )							{								$this->form->setError($field, $err);								$valid = false;							}						}					}				}			}			// check if model has a rule for this form			// <formName>Validate(&$form)			// and call if it does			$modelValidator = $form_name.'Validate';			if ( method_exists($this->model, $modelValidator) )				if ( !call_user_func_array(array($this->model, $modelValidator), array(&$this->form)) )					$valid = false;			// if nothing has happened, return true			return $valid;		}		// not submitted		else		{			return false;		}	}	/* ***************************************************** REDIRECTS ***************************************************** */	/**	 *	 * Redirect to a different page by Ctl/Method	 * Make sure to encode the parameter values nicely	 */	protected function redirect($controller = NULL, $method = NULL, $params = array())	{		if (is_null($controller))			$controller	= Url::getController();		if (is_null($method))			$method	= Url::getMethod();		$args = $this->__url_encode_params($params);		$link = DS.$controller.DS.$method.$args;		// if debug is on, do not redirect, but show the link instead		if (Settings::$debugLevel)		{			echo '<font color="red">Redirect Call: </font><a href="'.$link.'">'.$link.'</a>';		}		else		{			header('Location: '.$link);			exit();		}	}	/**	 *	 * Redirect to front page	 */	protected function redirectHome()	{		$this->redirect($GLOBALS['DEFAULT_CONTROLLER'], $GLOBALS['DEFAULT_METHOD']);	}	/**	 *	 * Redirect to a Backend Page	 */	protected function redirectBackend($controller = NULL, $method = NULL, $params = array())	{		if (is_null($controller))			$controller	= Url::getController();		if (is_null($method))			$method	= Url::getMethod();		$args = $this->__url_encode_params($params);		$link = DS.$GLOBALS['BACKEND_URL_PATH'].DS.$controller.DS.$method.$args;		// if debug is on, do not redirect, but show the link instead		if (Settings::$debugLevel)		{			echo '<font color="red">Redirect Call: </font><a href="'.$link.'">'.$link.'</a>';		}		else		{			header('Location: '.$link);			exit();		}	}	/* ***************************************************** PRIVATES ***************************************************** */	private function __url_encode_params($params = null)	{		$args = '';		if ( is_array($params) )		{			foreach ($params as $param)			{				// need to encode twice because of ? needs to be double encoded				// otherwise mode rewrite will break				$param	= rawurlencode($param);			// double encode / and \			$param	= str_replace(array('%2F','%5C'), array('%252F','%255C'), $param);			$param	= rawurlencode($param);			$args .= DS.$param;			}		}		return $args;	}}?>