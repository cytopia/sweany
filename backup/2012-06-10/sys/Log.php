<?phpclass Log{	private static $baseError;	private static $baseDebug;	private static $queryError;	private static $queryWarning;	private static $queryInfo;	private static $queryTime	= 0;	public static function setError($head, $message, $trace = array(), $start_time = null)	{		if ( !Settings::$debugLevel )			return;		$timing = ($start_time) ? ' ['.sprintf('%.6F',getmicrotime()-$start_time).' sec]' : '';		$size = sizeof(self::$baseError);		self::$baseError[$size]['head']		= $timing.' '.$head;		self::$baseError[$size]['msg']		= $message;		self::$baseError[$size]['error']	= error_get_last();		self::$baseError[$size]['trace']	= $trace;	}	public static function setWarn($head, $message, $trace = array(), $start_time = null)	{		if ( !Settings::$debugLevel )			return;		$timing = ($start_time) ? ' ['.sprintf('%.6F',getmicrotime()-$start_time).' sec]' : '';		$size = sizeof(self::$baseDebug);		self::$baseDebug[$size]['type']		= 'warn';		self::$baseDebug[$size]['head']		= $timing.' '.$head;		self::$baseDebug[$size]['msg']		= $message;		self::$baseDebug[$size]['trace']	= $trace;	}	public static function setInfo($head, $message, $trace = array(), $start_time = null)	{		if ( !$GLOBALS['PROJECT_DEBUG_LEVEL'] )			return;		$timing = ($start_time) ? ' ['.sprintf('%.6F',getmicrotime()-$start_time).' sec]' : '';		$size = sizeof(self::$baseDebug);		self::$baseDebug[$size]['type']		= 'info';		self::$baseDebug[$size]['head']		= $timing.' '.$head;		self::$baseDebug[$size]['msg']		= $message;		self::$baseDebug[$size]['trace']	= $trace;	}	public static function setQueryError($head, $message)	{		if ( !Settings::$debugLevel )			return;		$size = sizeof(self::$queryError);		self::$queryError[$size]['head']	= $head;		self::$queryError[$size]['msg']		= $message;		self::$queryError[$size]['trace']	= debug_backtrace();	}	public static function setQueryWarning($head, $message, $data = NULL)	{		if ( !Settings::$debugLevel )			return;		$size = sizeof(self::$queryWarning);		self::$queryWarning[$size]['head']	= $head;		self::$queryWarning[$size]['msg']	= $message;		self::$queryWarning[$size]['data']	= $data;		self::$queryWarning[$size]['trace']	= debug_backtrace();	}	public static function setQueryInfo($head, $message, $data = NULL)	{		if ( !Settings::$debugLevel )			return;		$size = sizeof(self::$queryInfo);		self::$queryInfo[$size]['head']	= $head;		self::$queryInfo[$size]['msg']	= $message;		self::$queryInfo[$size]['data']	= $data;	}	public static function setQueryTime($time)	{		if ( !Settings::$debugLevel )			return;		self::$queryTime += $time;	}	public static function show($return = FALSE)	{		if ( !Settings::$debugLevel )			return;		$error  = '';		$pre	= '<div style="border:#FFFFFF 1px solid; font-family:courier; color:#28F0BE; line-height:170%; background-color: black; font-size:10px; padding:10px; padding-right:10px; padding-top:10px; padding-bottom:20px; margin:10px; text-align:left;">';		$post	= '</div>';		// framework Errors		for ($i=0; $i<sizeof(self::$baseError); $i++)		{			$error .= '<span style="width:200px; color:#FF0000;">[ERROR]</span>';			$error .= '<strong>'.self::$baseError[$i]['head'] .'</strong>: ';			$error .= self::$baseError[$i]['msg'] .'<br/>';			if (is_array(self::$baseError[$i]['error']) )			{				$error .= '<font color="red">[PHP ERROR]</font> ';				$error .= '<strong>'.self::$baseError[$i]['error']['message'].'</strong>: ';				$error .= self::$baseError[$i]['error']['file'] .' on line '.self::$baseError[$i]['error']['line'].'<br/>';			}			if ( sizeof(self::$baseError[$i]['trace']) )			{				$error .= '<pre>'.print_r(self::$baseError[$i]['trace'], TRUE) .'</pre><br/>';			}		}		// MySQL Query Errors		for ($i=0; $i<sizeof(self::$queryError); $i++)		{			$error .= '<span style="width:200px; color:#FF0000;">[SQL ERR]</span>';			$error .= '<strong>'.self::$queryError[$i]['head'] .'</strong>: ';			$error .= self::$queryError[$i]['msg'] . '<br/>';			$error .= '<pre>'.print_r(self::$queryError[$i]['trace'], TRUE).'</pre>';		}		// DEBUG		for ($i=0; $i<sizeof(self::$baseDebug); $i++)		{			$error .= '<div>';			if (self::$baseDebug[$i]['type'] == 'info')				$error .= '<span style="width:200px; color:#00FF00;">[Info]</span>';			else				$error .= '<span style="width:200px; color:#FF6903;">[Warn]</span>';			$error .= '<strong>'.self::$baseDebug[$i]['head'] .'</strong>: ';			$error .= self::$baseDebug[$i]['msg'];			$error .= '</div>';		}		// MySQL Query Info		for ($i=0; $i<sizeof(self::$queryInfo); $i++)		{			$error .= '<span style="width:200px; color:purple;">[SQL INFO]</span>';			$error .= '<strong>'.self::$queryInfo[$i]['head'] .'</strong>: ';			$error .= self::$queryInfo[$i]['msg'] . '<br/>';		}		// MySQL Query Warnings		for ($i=0; $i<sizeof(self::$queryWarning); $i++)		{			$error .= '<span style="width:200px; color:#FF6903;">[SQL WARN]</span>';			$error .= '<strong>'.self::$queryWarning[$i]['head'] .'</strong>: ';			$error .= self::$queryWarning[$i]['msg'] . '<br/>';			$error .= '<pre>'.print_r(self::$queryWarning[$i]['data'], TRUE).'</pre><br/>';		}		// append total query time		$error .= '<span style="width:200px; color:purple;">[SQL INFO]</span>';		$error .= '<strong>Total Query Time:</strong>: ';		$error .= sprintf('%f', round(self::$queryTime, 10)).'<br/>';		if (isset($_SESSION))		{			foreach ($_SESSION as $key => $values)			{				$error .= '<font color="blue">[SESS]</font> ';				$error .= '<strong>'.$key .'</strong>: ';				$error .= sizeof($values).' elements  <br/>';				if ( is_array($values) )				{					foreach ($values as $subkey => $val)					{						$error .= '&nbsp;&nbsp;&nbsp;<font color="blue">['.$subkey.']</font> ';						$error .= is_array($val) ? implode(' | ', $val).'<br/>' : $val.'<br/>';					}				}			}		}		if ($return)			return $pre.$error.$post;		else			echo $pre.$error.$post;	}	public static function logToFile()	{		if ( !Settings::$debugLevel )			return;		if ( !Settings::$logToFile )			return;		$time 	= date('Y-m-d | H:i:s', time());		$fp		= @fopen(Settings::$logFile, 'a');		if (!$fp)		{			self::setError('Log to File', self::$logFile.' not found!');		}		else		{			fputs($fp, "\n".$time."\n");			fputs($fp, self::formatText());			fclose($fp);		}	}	private static function formatText()	{		$error = '';		for ($i=0; $i<sizeof(self::$baseDebug); $i++)		{			if (self::$baseDebug[$i]['type']=='info')				$error .= '[Info]: ';			else				$error .= '[Warn]: ';			$error .= strip_tags(self::$baseDebug[$i]['head']) .': ';			$error .= strip_tags(self::$baseDebug[$i]['msg']) . "\n";		}		for ($i=0; $i<sizeof(self::$queryInfo); $i++)		{			$error .= '[SQL]: ';			$error .= strip_tags(self::$queryInfo[$i]['head']) .': ';			$error .= strip_tags(self::$queryInfo[$i]['msg']) . "\n";		}		// append total query time		$error .= '[SQL]: ';		$error .= 'Total Query Time: ';		$error .= sprintf('%f', round(self::$queryTime, 10))."\n";		// MySQL Query Errors		for ($i=0; $i<sizeof(self::$queryError); $i++)		{				$error .= '[SQL ERR]: ';				$error .= strip_tags(self::$queryError[$i]['head']) .': ';				$error .= strip_tags(self::$queryError[$i]['msg']) . "\n";		}		// framework Errors		for ($i=0; $i<sizeof(self::$baseError); $i++)		{				$error .= '[ERROR]: ';				$error .= strip_tags(self::$baseError[$i]['head']) .': ';				$error .= strip_tags(self::$baseError[$i]['msg']) . "\n";			if (is_array(self::$baseError[$i]['error']) )			{				$error .= '[PHP ERROR]: ';				$error .= strip_tags(self::$baseError[$i]['error']['message']).': ';				$error .= self::$baseError[$i]['error']['file'] .' on line '.self::$baseError[$i]['error']['line']."\n";			}		}		return $error;	}}?>