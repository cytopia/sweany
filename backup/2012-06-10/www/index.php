<?php/* ************************************************************************************************************ * * Global defines * * ************************************************************************************************************/// System independent directory separatordefine('DS', DIRECTORY_SEPARATOR);// Root Pathdefine('ROOT', (dirname(dirname(__FILE__))));
 /* ************************************************************************************************************ * * Framework specific defines * * ************************************************************************************************************/
// Temp Pathdefine('TMP', ROOT.DS.'tmp');
// Framework Pathdefine('SYS', ROOT.DS.'sys');
// Framework CORE Pathdefine('CORE', SYS.DS.'core');// Framework HELPER Pathdefine('HELPER', SYS.DS.'helper');// Framework LIBRARY Pathdefine('LIB', SYS.DS.'lib');// Framework TEMPLATE Pathdefine('TEMPLATE', SYS.DS.'templates');// Framework Highligter Pathdefine('HL', LIB.DS.'highlighter');// HTML Skeletons Pathdefine('HTML_SKELETONS', TEMPLATE.DS.'html');// EMAIL Skeleton Pathdefine('EMAIL_SKELETONS', TEMPLATE.DS.'email');
/* ************************************************************************************************************ * * Project specific defines * * ************************************************************************************************************/
// Project Home Pathdefine('USR', ROOT.DS.'usr');// Project Source Path (blocks, customs, layouts, packages, tables)define('USR_SRC', USR.DS.'src');// Project Frontend Pathdefine('FE', USR.DS.'FE');// Project Backend Pathdefine('BE', USR.DS.'BE');// Project Packages Pathdefine('PACKAGES', USR.DS.'packages');// Project Table Pathdefine('TABLE', USR_SRC.DS.'tables');// Project Path for blocksdefine('BLOCK', USR_SRC.DS.'blocks');// Project Path for custom static functionsdefine('CUSTOM', USR_SRC.DS.'customs');// Project Path for Layoutdefine('LAYOUT', USR_SRC.DS.'layouts');
/* ************************************************************************************************************ * * Includes * * ************************************************************************************************************/
// Load Configurationrequire(USR.DS.'config.php');// Load Basic functionsrequire(LIB.DS.'functions.php');/* * Load Cores */require(CORE.DS.'CoreTemplate.php');require(CORE.DS.'Callback.php');require(CORE.DS.'Settings.php');require(CORE.DS.'Session.php');require(CORE.DS.'MySql.php');require(CORE.DS.'Url.php');require(CORE.DS.'Users.php');/* * Load Framework files */require(SYS.DS.'Log.php');require(SYS.DS.'Loader.php');require(SYS.DS.'Block.php');require(SYS.DS.'Controller.php');require(SYS.DS.'ControllerModel.php');require(SYS.DS.'Table.php');// TODO: outcomment in live version$FILE_LOAD_TIME = (getmicrotime() - $_SERVER['REQUEST_TIME']);/* ************************************************************************************************************ * * BOOTSTRAP * * ************************************************************************************************************/ /****************************************** Load Core ******************************************/
Log::setInfo('-- LOAD --', 'Framework files loaded in '.round($FILE_LOAD_TIME, 4).' seconds');// ----------   1.) Initialize the Settingsif ( !Settings::initialize() ){	// we cannot use log here, when settings breaks	// as the Logging settings are initialized in the settings	// itself, so we just output the error via 'echo'	echo Settings::getError();	exit();}Log::setInfo('Core', 'Settings loaded successfully, Debug Level: '.Settings::$debugLevel);// ----------   2.) Initialize the Urlif ( !Url::initialize() ){	Log::setError('Url', Url::getError());	Log::logToFile();	Log::show();	exit();}Log::setInfo('Core', 'Url loaded successfully, Request: '.Url::$request);//// 2.1) Backend || Frontend//// Now the URL is initialized and we can determine// between frontend or backend requests// In order to make them function properly// we have to assign the paths accordingly//if (URL::$backend){	define('CONTROLLER', BE.DS.'controller');	define('MODEL', BE.DS.'model');	define('VIEW', BE.DS.'view');	define('VIEW_WRAPPER', BE.DS.'wrapper');}else{	define('CONTROLLER', FE.DS.'controller');	define('MODEL', FE.DS.'model');	define('VIEW', FE.DS.'view');	define('VIEW_WRAPPER', FE.DS.'wrapper');}

// ----------   3.) Initialize the Framework Callbackif ( !Callback::initialize() ){	Log::setError('Callback', Callback::getError());	Log::logToFile();	Log::show();	exit();}Log::setInfo('Core', 'Callback Initialized successfully');
// ----------   4.) Initialize the Sessionif ( !Session::initialize() ){	Log::setError('Session', Session::getError());	Log::logToFile();	Log::show();	exit();}Log::setInfo('Core', 'Session Initialized successfully');// ----------   5.) Initialize MySQLif ( !MySql::initialize() ){	Log::setError('MySQL', MySql::getError());	Log::logToFile();	Log::show();	exit();}
Log::setInfo('Core', 'MySQL Initialized successfully, using db: '.$GLOBALS['SQL_DB']);// ----------   6.) Initialize Usersif ( !Users::initialize() ){	Log::setError('Users', Users::getError());	Log::logToFile();	Log::show();	exit();}if (Settings::$debugLevel)	Log::setInfo('Core', 'Users Initialized successfully, current user: (id: '.Users::id().') '.Users::name());else	Log::setInfo('Core', 'Users Initialized successfully');$BOOTSTRAP_TIME = (getmicrotime() - $_SERVER['REQUEST_TIME']) - $FILE_LOAD_TIME;Log::setInfo('-- BOOTSTRAP --', 'done in '.round($BOOTSTRAP_TIME, 4).' seconds');/* ************************************************************************************************************ * * POST BOOT * * ************************************************************************************************************/ // ----------   7.) Post Settings//// If we are not in the backend and SQL Visitor// Logging is enabled in conf.php// we will start the log now//if ( !URL::$backend ){	// Log visitors to SQL	if ( $GLOBALS['SQL_LOG_VISITORS'] )	{		$logger = Loader::loadTable('Visitors');		$logger->add();	}}/* ************************************************************************************************************ * * CALL * * ************************************************************************************************************//****************************************** Controller Call ******************************************/$object	= Callback::getObject();$class	= $object['class'];$method	= $object['method'];$params	= $object['params'];$c		= new $class;$package= $c->package;	// check if we are using a package
Log::setInfo('-- CALL --', 'calling '.(($package)?'<strong>PACKAGE</strong>':'').' <strong><font color="green">'.$class.'->'.$method.'("'.implode('", "',$params).'")</font></strong>');$CALL_START_TIME = getmicrotime();
$result	= call_user_func_array(array($c, $method), $params);$CALL_END_TIME = getmicrotime() - $CALL_START_TIME;
Log::setInfo('-- CALL --', 'done in  '.sprintf('%.6F',$CALL_END_TIME).' sec.');/****************************************** RENDER CASE l ******************************************/
//// CASE 1:// if render is false, we just want to output the return// of the function. Used for ajax requests to get a value//if ( !$c->render ){	echo $result;	// Cleanup	Settings::cleanup();	Url::cleanup();	Callback::cleanup();	Session::cleanup();	MySQL::cleanup();	// Loggin	Log::setInfo('End', 'Finished');	Log::setInfo('Total Page Time', 'loaded in '.round(getmicrotime() - $_SERVER['REQUEST_TIME'], 4).' seconds');	Log::logToFile();	exit();}/****************************************** RENDER CASE 2 ******************************************///// CASE 2:
// if render is true, get the view,// put it into the layout and render it to the browser//else{	$vars			= $c->getVars();	$helpers		= $c->getHelper();	$blocks			= $c->getBlocks();
	$view			= $c->getView();	$layout			= $c->getLayout();	$html_skeleton	= HTML_SKELETONS.DS.'default_skeleton.tpl.php';	/**	* All package views contain plain code with no layouting (such as menues, etc)	* They must always use a view wrapper, so that you do not alter the layout directly	* in the package view, but in the wrapper.	* In the wrapper you can put menus, headers, displays, etc around the actual content	*	* If no wrapper has been defined, we will use a plain default wrapper that just includes the view,	* so you can take care about the	*	* NOTE:	* All wrappers filenames are: "wrapper_<view_filename>"	*/	if ( $package )	{		$default_wrapper= VIEW_WRAPPER.DS.'default.tpl.php';		$view_wrapper	= VIEW_WRAPPER.DS.$package.DS.$class.DS.'wrapper_'.$view;		$view			= PACKAGES.DS.$package.DS.'view'.DS.$class.DS.$view;		// use default wrapper		if (!is_file($view_wrapper))		{			Log::setWarn('View Wrapper', $view_wrapper. ' does not exist for view: '.$view.', but all PACKAGES need a wrapper!');			Log::setWarn('View Wrapper', 'Using default Wrapper from '.$default_wrapper);			$render_element = $default_wrapper;		}		// use specified wrapper		else		{			$render_element = $view_wrapper;			Log::setInfo('View Wrapper', 'Using: '.$view_wrapper. ' for view: '.$view);		}	}	// NO PACKAGE - use views	else	{		$view = VIEW.DS.$class.DS.$view;		$render_element = $view;		Log::setInfo('View', 'Using: '.$view);	}	// ------- Check if view, layout and skeleton do exist	if (!is_file($view))	{		Log::setError('View', 'view '.$view. ' does not exist');		Log::show();		exit;	}	if (!is_file($layout))	{		Log::setError('Layout', 'layout '.$layout. ' does not exist');		Log::show();		exit;	}	if (!is_file($html_skeleton))	{		Log::setError('Html Skeleton', 'skeleton '.$html_skeleton. ' does not exist');		Log::show();		exit;	}	// ------- Set Helpers (defined by controller)	foreach ($helpers as $name => $s_class)	{		$$name	= unserialize($s_class);	}	// ------- Set Variables (defined by controller)	foreach ($vars as $var => $value)	{		$$var = $value;	}	// ------- Set Blocks (defined by controller)	foreach ($blocks as $name => $block)	{		$$name = $block;	}	/**	* TODO:	* Wrap page around output handler something like this:	*	* if(!ob_start("ob_gzhandler")) ob_start();	* include($html_skeleton);	* $content = ob_get_contents();	* ob_end_clean();	* echo $content;	*	* This will allow to to some settings in the views itself	* such as title, tags, etc	* This way you can also do some pre-settings in the wrapper for modules	*/	/*	 * Everything set!	 * Render the skeleton	*/	include($html_skeleton);	// Cleanup	Settings::cleanup();	Url::cleanup();	Callback::cleanup();	Session::cleanup();	MySQL::cleanup();	// Logging	Log::setInfo('DONE', 'Total Page Time: '.round(getmicrotime() - $_SERVER['REQUEST_TIME'], 4).' seconds');	Log::logToFile();	Log::show();	exit();}?>