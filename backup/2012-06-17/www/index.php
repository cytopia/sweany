<?phplist($usec, $sec) = explode(' ',microtime());$SERVER_REACTION_TIME = (((float)$usec + (float)$sec) - $_SERVER['REQUEST_TIME']);/* ************************************************************************************************************ * * Global defines * * ************************************************************************************************************/// System independent directory separatordefine('DS', DIRECTORY_SEPARATOR);// Root Pathdefine('ROOT', (dirname(dirname(__FILE__))));
 /* ************************************************************************************************************ * * Framework specific defines * * ************************************************************************************************************/
// Temp Pathdefine('TMP', ROOT.DS.'tmp');
// Framework Pathdefine('SYS', ROOT.DS.'sys');
// Framework CORE Pathdefine('CORE', SYS.DS.'core');// Framework HELPER Pathdefine('HELPER', SYS.DS.'helper');// Framework LIBRARY Pathdefine('LIB', SYS.DS.'lib');// Framework TEMPLATE Pathdefine('TEMPLATE', SYS.DS.'templates');// Framework Highligter Pathdefine('HL', LIB.DS.'highlighter');// HTML Skeletons Pathdefine('HTML_SKELETONS', TEMPLATE.DS.'html');// EMAIL Skeleton Pathdefine('EMAIL_SKELETONS', TEMPLATE.DS.'email');
/* ************************************************************************************************************ * * Project specific defines * * ************************************************************************************************************/
// Project Home Pathdefine('USR', ROOT.DS.'usr');// Project specific definesdefine('CONTROLLER', USR.DS.'controller');define('MODEL', USR.DS.'model');define('VIEW', USR.DS.'view');define('LAYOUT', USR.DS.'layout');define('BLOCK', USR.DS.'block');define('TABLE', USR.DS.'table');define('CUSTOM', USR.DS.'custom');/* ************************************************************************************************************ * * Includes * * ************************************************************************************************************/
// Load Configurationrequire(USR.DS.'config.php');// Load Basic functionsrequire(LIB.DS.'functions.php');/* * Load Cores */require(CORE.DS.'CoreTemplate.php');require(CORE.DS.'Callback.php');require(CORE.DS.'Settings.php');require(CORE.DS.'Session.php');require(CORE.DS.'MySql.php');require(CORE.DS.'Url.php');require(CORE.DS.'Users.php');/* * Load Framework files */require(SYS.DS.'Log.php');require(SYS.DS.'Loader.php');require(SYS.DS.'BaseController.php');require(SYS.DS.'BlockController.php');require(SYS.DS.'PageController.php');require(SYS.DS.'PageModel.php');require(SYS.DS.'Table.php');// TODO: outcomment in live version$FILE_LOAD_TIME = ((getmicrotime() - $_SERVER['REQUEST_TIME']) - $SERVER_REACTION_TIME);/* ************************************************************************************************************ * * BOOTSTRAP * * ************************************************************************************************************/ /****************************************** Load Core ******************************************/Log::setInfo('-- SERVER --', 'Reaction Time  '.round($SERVER_REACTION_TIME, 4).' seconds');
Log::setInfo('-- LOAD --', 'Framework files loaded in '.round($FILE_LOAD_TIME, 4).' seconds');// ----------   1.) Initialize the Settingsif ( !Settings::initialize() ){	// we cannot use log here, when settings breaks	// as the Logging settings are initialized in the settings	// itself, so we just output the error via 'echo'	echo Settings::getError();	exit();}Log::setInfo('Core', 'Settings loaded successfully, Debug Level: '.Settings::$debugLevel);// ----------   2.) Initialize the Urlif ( !Url::initialize() ){	Log::setError('Url', Url::getError());	Log::logToFile();	Log::show();	exit();}Log::setInfo('Core', 'Url loaded successfully, Request: '.Url::$request);

// ----------   3.) Initialize the Framework Callbackif ( !Callback::initialize() ){	Log::setError('Callback', Callback::getError());	Log::logToFile();	Log::show();	exit();}Log::setInfo('Core', 'Callback Initialized successfully');
// ----------   4.) Initialize the Sessionif ( !Session::initialize() ){	Log::setError('Session', Session::getError());	Log::logToFile();	Log::show();	exit();}Log::setInfo('Core', 'Session Initialized successfully');// ----------   5.) Initialize MySQLif ( !MySql::initialize() ){	Log::setError('MySQL', MySql::getError());	Log::logToFile();	Log::show();	exit();}
Log::setInfo('Core', 'MySQL Initialized successfully, using db: '.$GLOBALS['SQL_DB']);// ----------   6.) Initialize Usersif ( !Users::initialize() ){	Log::setError('Users', Users::getError());	Log::logToFile();	Log::show();	exit();}if (Settings::$debugLevel)	Log::setInfo('Core', 'Users Initialized successfully, current user: (id: '.Users::id().') '.Users::name());else	Log::setInfo('Core', 'Users Initialized successfully');$BOOTSTRAP_TIME = (getmicrotime() - $_SERVER['REQUEST_TIME']) - $FILE_LOAD_TIME;Log::setInfo('-- BOOTSTRAP --', 'done in '.round($BOOTSTRAP_TIME, 4).' seconds');/* ************************************************************************************************************ * * POST BOOT * * ************************************************************************************************************/ // ----------   7.) Post Settings//// If we are not in the backend and SQL Visitor// Logging is enabled in conf.php// we will start the log now//// Log visitors to SQLif ( $GLOBALS['SQL_LOG_VISITORS'] ){	$logger = Loader::loadTable('Visitors');	$logger->add();}/* ************************************************************************************************************ * * CALL * * ************************************************************************************************************//****************************************** Controller Call ******************************************/$object	= Callback::getObject();$class	= $object['class'];$method	= $object['method'];$params	= $object['params'];$c		= new $class;
Log::setInfo('-- CALL --', 'calling <strong><font color="green">'.$class.'->'.$method.'("'.implode('", "',$params).'")</font></strong>');$CALL_START_TIME = getmicrotime();
$result	= call_user_func_array(array($c, $method), $params);$CALL_END_TIME = getmicrotime() - $CALL_START_TIME;
Log::setInfo('-- CALL --', 'done in  '.sprintf('%.6F',$CALL_END_TIME).' sec.');/****************************************** RENDER CASE l ******************************************/
//// CASE 1:// if render is false, we just want to output the return// of the function. Used for ajax requests to get a value//if ( !$c->render ){	echo $result;	// Cleanup	Settings::cleanup();	Url::cleanup();	Callback::cleanup();	Session::cleanup();	MySQL::cleanup();	// Loggin	Log::setInfo('End', 'Finished');	Log::setInfo('Total Page Time', 'loaded in '.round(getmicrotime() - $_SERVER['REQUEST_TIME'], 4).' seconds');	Log::logToFile();	exit();}/****************************************** RENDER CASE 2 ******************************************///// CASE 2:
// if render is true, get the view,// put it into the layout and render it to the browser//else{	$vars			= $c->getVars();	$helpers		= $c->getHelpers();	$blocks			= $c->getBlocks();	// TODO: standard view name is hardcoded!!!!	$view			= VIEW.DS.$class.DS.$c->getView();	$layout			= LAYOUT.DS.$c->getLayout();	$html_skeleton	= HTML_SKELETONS.DS.'default_skeleton.tpl.php';	$render_element = $view;	Log::setInfo('View', 'Using: '.$view);	// ------- Check if view, layout and skeleton do exist	if (!is_file($view))	{		Log::setError('View', 'view '.$view. ' does not exist');		Log::show();		exit;	}	if (!is_file($layout))	{		Log::setError('Layout', 'layout '.$layout. ' does not exist');		Log::show();		exit;	}	if (!is_file($html_skeleton))	{		Log::setError('Html Skeleton', 'skeleton '.$html_skeleton. ' does not exist');		Log::show();		exit;	}	// ------- Set Helpers (defined by controller)	foreach ($helpers as $name => $helper)	{		$$name	= $helper;	}	// ------- Set Variables (defined by controller)	foreach ($vars as $name => $var)	{		$$name = $var;	}	// ------- Set Blocks (defined by controller)	foreach ($blocks as $name => $block)	{		$$name = $block;	}	/**	* TODO:	* Wrap page around output handler something like this:	*	* if(!ob_start("ob_gzhandler")) ob_start();	* include($html_skeleton);	* $content = ob_get_contents();	* ob_end_clean();	* echo $content;	*	* This will allow to to some settings in the views itself	* such as title, tags, etc	* This way you can also do some pre-settings in the wrapper for modules	*/	/*	 * Everything set!	 * Render the skeleton	*/	include($html_skeleton);	// Cleanup	Settings::cleanup();	Url::cleanup();	Callback::cleanup();	Session::cleanup();	MySQL::cleanup();	// Logging	Log::setInfo('DONE', 'Total Page Time: '.round(getmicrotime() - $_SERVER['REQUEST_TIME'], 4).' seconds');	Log::logToFile();	Log::show();	exit();}?>