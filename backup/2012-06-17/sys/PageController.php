<?phpabstract Class PageController extends BaseController{	/* ***************************************************** VARIABLES ***************************************************** */	/*	 * The following will define the Variables, View Layout and Blocks	 * to use	 *	 * Already defined in BaseController:	 *	private $vars	= array();	// all variables parsed to the view	 *	private $view	= null;		// the view itself to use	 */	private $layout	= null;		// the layout file to render the view into	private $blocks	= array();	// pre-rendered blocks (if any)	/*	 * If not overwritten, it will be rendered	 * into a normal view and be placed in the layout	 *	 * If you do AJAX request and want to parse raw data	 * or json, you set this to false	 */	public $render	= true;	/*	 * The array filled by each controller	 * to validate forms automatically	 * with pre-defined validators	 * found in Rules.php, custom functions	 * and/or a <form_name>Validate() function	 * in the model	 */	protected $formValidator = array();	/*	 *  callback type used for the $ob_handler	 *  In Debug Mode we still want to be able to see errors	 *  In Production Mode we try to use compression	 *  (see constructor)	 */	private $ob_callback = null;	/* ***************************************************** CONSTRUCTOR ***************************************************** */	public function __construct()	{		// Call the Parent Constructor		// which will initialize the helpers		parent::__construct();		// set auto render to true		$this->render	= true;		// set default layout defined in config.php		$this->layout	= $GLOBALS['HTML_DEFAULT_LAYOUT'];		/*		* Initialize the Model		*		* Do not let the autoloader handle this (via = new Model)		* as the 'loadModel' function is optimized and much faster than the auto-loader.		* loadModel usually only takes 1 round.		*		* The default loadModel is to not use the block model		* There fore $this->blocks needs to be true in the BlockController		*/		$this->model	= Loader::loadModel(get_class($this));		/*		 *  initialize the callback function here once		 *  otherwise we would need to check every time		 *  attachBlock is called		 *  In production mode we try to use compression from ob_gzhandler		 */		$this->ob_callback = (Settings::$debugLevel) ? null : 'ob_gzhandler';	}	public function __desctruct()	{		parent::__destruct();	}	/* ***************************************************** CONTROLLER SETTER ***************************************************** */	protected function layout($layout)	{		$this->layout = $layout;	}	protected function attachBlock($varName, $blockControllerName, $blockMethodName, $blockMethodParams = array())	{		if ( Settings::$debugLevel )			$start = getmicrotime();		$this->blocks[$varName] = '';		// 01) Load in instantiate block		$block = Loader::loadBlock($blockControllerName);		if (  !class_exists(get_class($block)) )		{			Log::setError('Attach Block', '[Exist] Error in '.get_class($block).'->'.$blockMethodName.'('.implode(',', $blockMethodParams).')', debug_backtrace());			return;		}		// 03) execute the block		if ( ($ret = call_user_func_array(array($block, $blockMethodName), $blockMethodParams)) === false)		{			Log::setError('Attach Block', '[Call] '.get_class($block).'->'.$blockMethodName.'('.implode(',', $blockMethodParams).') returns FALSE', debug_backtrace());			return;		}		// 04) set view variables		foreach ($bVars	= $block->getVars() as $name => $value)		{			$$name = $value;		}		// 05) set view helpers		foreach ($bHelpers = $block->getHelpers() as $name => $helper)		{			$$name	= $helper;		}		// 05) get View		$view		= $block->getView();		$view_path	= BLOCK.DS.$blockControllerName.DS.'view'.DS.$block->getView();		// If the block is a form page and the form has been		// submitted, then the block does not necessarily need		// to load a view, but just return its state,		// so we only set a warning here and don't exit the script		if (!is_file($view_path))		{			Log::setWarn('BlockView', $view_path. ' does not exist');		}		else		{			// 06) RENDER			// Turn on output buffering			// TODO: handle debug mode, so that errors will be displayed!!			if ( !ob_start($this->ob_callback) )			{				ob_start();			}			include($view_path);			$content = ob_get_contents();			// 07) Clean (erase) the output buffer and turn off output buffering			ob_end_clean();			$this->blocks[$varName]	= $content;		}		// 09 Restore Header		//		// In case the block Controller did set a custom header e.g,		// header("Content-Type: image/png"); then it will still be active here		// so we have to restore it		// TODO:		//header('Content-type: text/html; charset=UTF-8');		// 10 Remove setted variables		//		// TODO: needs testing		foreach ($bHelpers as $name => $value)		{			unset($$name);		}		foreach ($bVars as $name => $value)		{			unset($$name);		}		if ( Settings::$debugLevel )			Log::setInfo('Render Block', $blockControllerName.'::'.get_class($block).'->'.$blockMethodName, null, $start);		// 08) store block into array		return $ret;	}	/* ***************************************************** INDEX GETTER ***************************************************** */	public function getBlocks()	{		return $this->blocks;	}	public function getLayout()	{		return $this->layout;	}	/* ***************************************************** REDIRECTS ***************************************************** */	/**	 *	 * Redirect to a different page by Ctl/Method	 * Make sure to encode the parameter values nicely	 */	protected function redirect($controller = NULL, $method = NULL, $params = array())	{		if (is_null($controller))			$controller	= Url::getController();		if (is_null($method))			$method	= Url::getMethod();		$args = /*$this->__url_encode_params*/implode('/', $params);		$link = DS.$controller.DS.$method.DS.$args;		// if debug is on, do not redirect, but show the link instead		if (Settings::$debugLevel)		{			echo '<font color="red">Redirect Call: </font><a href="'.$link.'">'.$link.'</a>';		}		else		{			header('Location: '.$link);			exit();		}	}	/**	 *	 * Redirect to front page	 */	protected function redirectHome()	{		$this->redirect($GLOBALS['DEFAULT_CONTROLLER'], $GLOBALS['DEFAULT_METHOD']);	}	protected function redirectDelayed($controller, $method, $params = array(), $head, $note, $delay=5)	{		// Build Session Array		$info['head']	= $head;		$info['body']	= $note;		$info['url']	= DS.$controller.DS.$method.DS.implode('/', $params);		$info['delay']	= $delay;		Session::set('redirect_info', $info);		$this->redirect($GLOBALS['REDIRECT_CONTROLLER'], $GLOBALS['REDIRECT_METHOD']);	}}?>