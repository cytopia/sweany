<?phpclass Nachrichten extends PageController{	public $helpers = array('Html', 'HtmlTemplate', 'Form', 'Css', 'Javascript');	/* ***************************************** FORM VALIDATOR ******************************************/	protected $formValidator = array(		// Form for replying message		'form_reply_message'	=> array(			'subject'	=> array(				'minLen'	=> array(					'rule'	=> array('minLen', 1),					'error'	=> 'Du musst den Betreff ausf&uuml;llen.',				),			),			'message'	=> array(				'minLen'	=> array(					'rule'	=> array('minLen', 1),					'error'	=> 'Du solltest schon etwas schreiben.',				),			),		),	);	/* **********************************************************************************************************************	*	*   S E T T I N G S	*	* **********************************************************************************************************************/	private $userProfileCtl		= 'Profile';	private $userProfileMethod	= 'show';	private $userLoginCtl		= 'User';	private $userLoginMethod	= 'login';	// The name of the user, when it is the system	// and not a real user	// you cannot reply to this user as well	private $systemUserName		= 'System';	public function ajax_live_search_username()	{		header('Content-Type: text/html; charset=utf-8');		$this->render = false;		$query = $_POST['query'];		if ( strlen($query)>1 )		{			$data	= MySql::select("SELECT username FROM users WHERE username LIKE '".$query."%';");			$result	= array();			$index	= 0;			foreach ($data as $row)			{				$result[$index] = $row['username'];				$index++;			}			return json_encode($result);		}		return json_encode(array());	}	/* **********************************************************************************************************************	*	*   F U N C T I O N S	*	* **********************************************************************************************************************/	public function overview()	{		if ( !$this->user->isLoggedIn() )		{			Session::set('referrer', array('controller'	=> __CLASS__, 'method' => __FUNCTION__));			$this->redirect($this->userLoginCtl, $this->userLoginMethod);			return;		}		// ADD TEMPLATE ELEMENTS		$this->htmltemplate->setTitle('Nachrichten Box');		// ADD CSS		$this->css->addFile('/css/user_messages.css');		// VIEW VARIABLES		$this->set('numUnreadInbox', $this->model->UserMessages->countMyUnreadInboxMessages($this->user->id()));		$this->set('numInbox', $this->model->UserMessages->countMyInboxMessages($this->user->id()));		$this->set('numArchive', $this->model->UserMessages->countMyArchiveMessages($this->user->id()));		$this->set('numTrash', $this->model->UserMessages->countMyTrashMessages($this->user->id()));		$this->set('numOutbox', $this->model->UserMessages->countMyOutboxMessages($this->user->id()));		$this->set('className', __CLASS__);		// VIEW OPTIONS		$this->set('menu', 'profile');		$this->view('overview.tpl.php');	}	public function inbox()	{		if ( !$this->user->isLoggedIn() )		{			Session::set('referrer', array('controller'	=> __CLASS__, 'method' => __FUNCTION__));			$this->redirect($this->userLoginCtl, $this->userLoginMethod);			return;		}		if ( $this->form->isSubmitted('form_message_action') )		{			if ( !is_null($Ids = $this->form->getValue('message_id')) )			{				if ( ($this->form->fieldIsSet('trash')) )				{					foreach ($Ids as $message_id)					{						// Validate, if it is actually my inbox message.						// User could have injected random id's						if ( $this->model->UserMessages->isMyInboxMessage($this->user->id(), $message_id) )						{							$this->model->UserMessages->moveMyInboxMessageToTrash($message_id);						}					}				}				else if ( ($this->form->fieldIsSet('archive')) )				{					foreach ($Ids as $message_id)					{						// Validate, if it is actually my inbox message.						// User could have injected random id's						if ( $this->model->UserMessages->isMyInboxMessage($this->user->id(), $message_id) )						{							$this->model->UserMessages->moveMyInboxMessageToArchive($message_id);						}					}				}			}		}		// ADD TEMPLATE ELEMENTS		$this->htmltemplate->setTitle('Empfangene Nachrichten');		// ADD CSS		$this->css->addFile('/css/user_messages.css');		// VIEW VARIABLES		$this->set('messages', $this->model->UserMessages->getMyInboxMessages($this->user->id()));		$this->set('className', __CLASS__);		$this->set('userProfileCtl', $this->userProfileCtl);		$this->set('userProfileMethod', $this->userProfileMethod);		$this->set('systemUserName', $this->systemUserName);		// VIEW OPTIONS		$this->set('menu', 'profile');		$this->view('inbox.tpl.php');	}	public function archive()	{		if ( !$this->user->isLoggedIn() )		{			Session::set('referrer', array('controller'	=> __CLASS__, 'method' => __FUNCTION__));			$this->redirect($this->userLoginCtl, $this->userLoginMethod);			return;		}		if ( $this->form->isSubmitted('form_message_action') )		{			if ( !is_null($Ids = $this->form->getValue('message_id')) )			{				if ( ($this->form->fieldIsSet('trash')) )				{					foreach ($Ids as $message_id)					{						// Validate, if it is actually my inbox message.						// User could have injected random id's						if ( $this->model->UserMessages->isMyArchiveMessage($this->user->id(), $message_id) )						{							$this->model->UserMessages->moveMyArchiveMessageToTrash($message_id);						}					}				}			}		}		// ADD TEMPLATE ELEMENTS		$this->htmltemplate->setTitle('Archivierte Nachrichten');		// ADD CSS		$this->css->addFile('/css/user_messages.css');		// VIEW VARIABLES		$this->set('messages', $this->model->UserMessages->getMyArchiveMessages($this->user->id()));		$this->set('className', __CLASS__);		$this->set('userProfileCtl', $this->userProfileCtl);		$this->set('userProfileMethod', $this->userProfileMethod);		$this->set('systemUserName', $this->systemUserName);		// VIEW OPTIONS		$this->set('menu', 'profile');		$this->view('archive.tpl.php');	}	public function trash()	{		if ( !$this->user->isLoggedIn() )		{			Session::set('referrer', array('controller'	=> __CLASS__, 'method' => __FUNCTION__));			$this->redirect($this->userLoginCtl, $this->userLoginMethod);			return;		}		if ( $this->form->isSubmitted('form_message_action') )		{			if ( !is_null($Ids = $this->form->getValue('message_id')) )			{				if ( ($this->form->fieldIsSet('restore')) )				{					foreach ($Ids as $message_id)					{						// Validate, if it is actually my inbox message.						// User could have injected random id's						if ( $this->model->UserMessages->isMyTrashMessage($this->user->id(), $message_id) )						{							$this->model->UserMessages->restoreMyMessageFromTrash($message_id);						}					}				}				else if ( ($this->form->fieldIsSet('delete')) )				{					foreach ($Ids as $message_id)					{						// Validate, if it is actually my inbox message.						// User could have injected random id's						if ( $this->model->UserMessages->isMyTrashMessage($this->user->id(), $message_id) )						{							$this->model->UserMessages->markMyReceivedMessageDeleted($message_id);						}					}				}			}		}		// ADD TEMPLATE ELEMENTS		$this->htmltemplate->setTitle('Papierkorb');		// ADD CSS		$this->css->addFile('/css/user_messages.css');		// VIEW VARIABLES		$this->set('messages', $this->model->UserMessages->getMyTrashMessages($this->user->id()));		$this->set('className', __CLASS__);		$this->set('userProfileCtl', $this->userProfileCtl);		$this->set('userProfileMethod', $this->userProfileMethod);		$this->set('systemUserName', $this->systemUserName);		// VIEW OPTIONS		$this->set('menu', 'profile');		$this->view('trash.tpl.php');	}	public function outbox()	{		if ( !$this->user->isLoggedIn() )		{			Session::set('referrer', array('controller'	=> __CLASS__, 'method' => __FUNCTION__));			$this->redirect($this->userLoginCtl, $this->userLoginMethod);			return;		}		if ( $this->form->isSubmitted('form_message_action') )		{			if ( !is_null($Ids = $this->form->getValue('message_id')) )			{				if ( ($this->form->fieldIsSet('delete')) )				{					foreach ($Ids as $message_id)					{						// Validate, if it is actually my inbox message.						// User could have injected random id's						if ( $this->model->UserMessages->isMyOutboxMessage($this->user->id(), $message_id) )						{							$this->model->UserMessages->markMySendMessageDeleted($message_id);						}					}				}			}		}		// ADD TEMPLATE ELEMENTS		$this->htmltemplate->setTitle('Gesendete Nachrichten');		// ADD CSS		$this->css->addFile('/css/user_messages.css');		// VIEW VARIABLES		$this->set('messages', $this->model->UserMessages->getMyOutboxMessages($this->user->id()));		$this->set('className', __CLASS__);		$this->set('userProfileCtl', $this->userProfileCtl);		$this->set('userProfileMethod', $this->userProfileMethod);		// VIEW OPTIONS		$this->set('menu', 'profile');		$this->view('outbox.tpl.php');	}	public function read($message_id = NULL, $type = 'inbox')	{		if ( !$this->user->isLoggedIn() )		{			Session::set('referrer', array('controller'	=> __CLASS__, 'method' => __FUNCTION__));			$this->redirect($this->userLoginCtl, $this->userLoginMethod);			return;		}		/*		 * Handle POST:		 *		 * 01) differentiate between received and send messages		 */		if ( $this->form->isSubmitted('form_message_action') )		{			// ======================== (01) MY RECEIVED MESSAGES ========================//			// ---------- ONLY FOR: MY INBOX MESSAGE			if ( $this->model->UserMessages->isMyInboxMessage($this->user->id(), $message_id) )			{				// Inbox can have trash and archive				if ( $this->form->fieldIsSet('trash') )				{					$this->model->UserMessages->moveMyInboxMessageToTrash($message_id);					$this->redirect(NULL, 'trash');					return;				}				else if ( $this->form->fieldIsSet('archive') )				{					$this->model->UserMessages->moveMyInboxMessageToArchive($message_id);					$this->redirect(NULL, 'archive');					return;				}			}			// ---------- ONLY FOR: MY ARCHIVE MESSAGE			else if ( $this->model->UserMessages->isMyArchiveMessage($this->user->id(), $message_id) )			{				// Archive can have only have trash				if ( $this->form->fieldIsSet('trash') )				{					$this->model->UserMessages->moveMyArchiveMessageToTrash($message_id);					$this->redirect(NULL, 'trash');					return;				}			}			// ---------- ONLY FOR: MY TRASH MESSAGE			else if ( $this->model->UserMessages->isMyTrashMessage($this->user->id(), $message_id) )			{				// Archive can have only restore				if ( $this->form->fieldIsSet('restore') )				{					$this->model->UserMessages->restoreMyMessageFromTrash($message_id);					if ( $this->model->UserMessages->isMyInboxMessage($this->user->id(), $message_id) )					{						$this->redirect(NULL, 'inbox');						return;					}					else					{						$this->redirect(NULL, 'archive');						return;					}				}			}			// ======================== (02) MY SEND MESSAGES ========================//			else if ( $this->model->UserMessages->isMyOutboxMessage($this->user->id(), $message_id) )			{				// Outbox can only have permanent delete				if ( $this->form->fieldIsSet('delete') )				{					$this->model->UserMessages->markMySendMessageDeleted($message_id);					$this->redirect(NULL, 'inbox');					return;				}			}		}		if ( $type == 'inbox' )		{			// If it is not my RECEIVED message, redirect silently to inbox			if ( !$this->model->UserMessages->isMyReceivedMessage($this->user->id(), $message_id) )			{				$this->redirect(__CLASS__, 'inbox');				return;			}			// Mark the inbox Message as read			else			{				$this->model->UserMessages->marMessageRead($message_id);			}		}		else if ( $type == 'outbox' )		{			// If it is not my message, redirect silently to inbox			if ( !$this->model->UserMessages->isMyOutboxMessage($this->user->id(), $message_id) )			{				$this->redirect(__CLASS__, 'outbox');				return;			}		}		else		{			$this->redirect(__CLASS__, 'inbox');			return;		}		// ADD TEMPLATE ELEMENTS		$this->htmltemplate->setTitle('Nachrichten');		// ADD CSS		$this->css->addFile('/css/user_messages.css');		// VIEW VARIABLES		$this->set('message', $this->model->UserMessages->getRow($message_id));		$this->set('type', $type);		$this->set('userProfileCtl', $this->userProfileCtl);		$this->set('userProfileMethod', $this->userProfileMethod);		$this->set('systemUserName', $this->systemUserName);		// VIEW OPTIONS		$this->set('menu', 'profile');		$this->view('read.tpl.php');	}	public function write($user_id = null)	{		if ( !$this->user->isLoggedIn() )		{			Session::set('referrer', array('controller'	=> __CLASS__, 'method' => __FUNCTION__, 'params' => array($user_id)));			$this->redirect($this->userLoginCtl, $this->userLoginMethod);			return;		}		$to_username = $this->user->getNameById($user_id);		if ( $this->form->isSubmitted('form_reply_message') )		{			$subject		= $this->form->getValue('subject');			$message		= $this->form->getValue('message');			$to_username	= $this->form->getValue('to_username');			if ( !strlen($subject) )			{				$this->form->setError('subject', 'Du musst den Betreff ausfüllen.');			}			if ( !strlen($message) )			{				$this->form->setError('message', 'Du solltest schon etwas schreiben.');			}			if ( !$this->user->usernameExists($to_username) )			{				$this->form->setError('to_username', 'Dieser Benutzername existiert nicht.');			}			if ( !$this->user->getIdByName($to_username) )			{				$this->form->setError('to_username', 'Dieser Benutzername existiert nicht!');			}			if ( $this->form->isValid('form_reply_message') )			{				$to_user_id = $this->user->getIdByName($to_username);				$message_id	= $this->model->UserMessages->send($this->user->id(), $to_user_id, $subject, $message);				$this->redirect(__CLASS__, 'read', array($message_id, 'outbox'));				return;			}		}		// ADD TEMPLATE ELEMENTS		$this->htmltemplate->setTitle('Neue Nachricht schreiben');		// VIEW VARIABLES		$this->set('to_username', $to_username);		// ADD JS		$this->javascript->addFile('/js/ajax.js');		// VIEW OPTIONS		$this->set('menu', 'profile');		$this->view('write.tpl.php');	}	public function reply($user_id = null, $message_id = null)	{		if ( !$this->user->isLoggedIn() )		{			Session::set('referrer', array('controller'	=> __CLASS__, 'method' => __FUNCTION__, 'params' => array($user_id)));			$this->redirect($this->userLoginCtl, $this->userLoginMethod);			return;		}		// Only allow answering messages that I have received		if ( !$this->model->UserMessages->isMyReceivedMessage($this->user->id(), $message_id) )		{			$this->redirect(__CLASS__, 'inbox');			return;		}		// Only allow writing messages to active enabled users		// And do not allow writing to myself		if ( !$this->user->exists($user_id) || !$this->user->isEnabled($user_id) ||			$this->user->isLocked($user_id) || $this->user->isDeleted($user_id) )		{			$canMessage = false;		}		else		{			$canMessage = true;		}		if ( $this->validateForm('form_reply_message') && $canMessage  )		{			$subject	= $this->form->getValue('subject');			$message	= $this->form->getValue('message');			$to_user_id	= $this->form->getValue('to_user_id');			$message_id	= $this->model->UserMessages->reply($this->user->id(), $to_user_id, $message_id, $subject, $message);			$this->redirect(__CLASS__, 'read', array($message_id, 'outbox'));			return;		}		// Add old message and title to the form		$message	= $this->model->UserMessages->getRow($message_id);		$title		= 'Re: '.$message['subject'];		$tmp		= explode("\n", $message['message']);		$body		= "\n\n\n".$this->user->getNameById($message['fk_from_user_id']);		$body		.= ' am ' .date('d.m.Y H:m', strtotime($message['created']))."\n";		$body		.= '---------------------------------'."\n";		for ($i=0; $i<sizeof($tmp);$i++)		{			$body .= '<< '.$tmp[$i]."\n";		}		$this->form->setFormValue('form_reply_message', 'subject', $title);		$this->form->setFormValue('form_reply_message', 'message', $body);		// ADD TEMPLATE ELEMENTS		$this->htmltemplate->setTitle('Antworten');		// VIEW VARIABLES		$this->set('can_message', $canMessage);		$this->set('to_user_id', $user_id);		$this->set('to_username', $this->user->getNameById($user_id));		$this->set('userProfileCtl', $this->userProfileCtl);		$this->set('userProfileMethod', $this->userProfileMethod);		// VIEW OPTIONS		$this->set('menu', 'profile');		$this->view('reply.tpl.php');	}}?>