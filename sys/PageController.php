<?phpabstract Class PageController extends BaseController{	/* ***************************************************** VARIABLES ***************************************************** */	/*	 * The following will define the Variables, View Layout and Blocks	 * to use	 *	 * Already defined in BaseController:	 *	private $vars	= array();	// all variables parsed to the view	 *	private $view	= null;		// the view itself to use	 */	private $layout	= null;		// the layout file to render the view into	private $blocks	= array();	// pre-rendered blocks (if any)	/*	 * If not overwritten, it will be rendered	 * into a normal view and be placed in the layout	 *	 * If you do AJAX request and want to parse raw data	 * or json, you set this to false	 */	public $render	= true;	/*	 * The array filled by each controller	 * to validate forms automatically	 * with pre-defined validators	 * found in Rules.php, custom functions	 * and/or a <form_name>Validate() function	 * in the model	 */	protected $formValidator = array();	/*	 *  callback type used for the $ob_handler	 *  In Debug Mode we still want to be able to see errors	 *  In Production Mode we try to use compression	 *  (see constructor)	 */	private $ob_callback = null;	/* ***************************************************** CONSTRUCTOR ***************************************************** */	public function __construct()	{		// Call the Parent Constructor		// which will initialize the helpers		parent::__construct();		// set auto render to true		$this->render	= true;		// set default layout which is the default function in the LayoutController		//$this->layout	= 'defaultLayout';		/*		* Initialize the Model		*		* Do not let the autoloader handle this (via = new Model)		* as the 'loadModel' function is optimized and much faster than the auto-loader.		* loadModel usually only takes 1 round.		*		* The default loadModel is to not use the block model		* There fore $this->blocks needs to be true in the BlockController		*/		$this->model	= Loader::loadModel(get_class($this));		/*		 *  initialize the callback function here once		 *  otherwise we would need to check every time		 *  attachBlock is called		 *  In production mode we try to use compression from ob_gzhandler		 */		$this->ob_callback = (Settings::$debugLevel) ? null : 'ob_gzhandler';	}	public function __desctruct()	{		parent::__destruct();	}	/* ***************************************************** CONTROLLER SETTER ***************************************************** */	protected function layout($layout)	{		$this->layout = $layout;	}	protected function attachBlock($varName, $blockControllerName, $blockMethodName, $blockMethodParams = array())	{		if ( Settings::$debugLevel )			$start = getmicrotime();		$output = Render::block($blockControllerName, $blockMethodName, $blockMethodParams);		if ( Settings::$debugLevel )			Log::setInfo('Render Block', $blockControllerName.'::'.($blockControllerName).'->'.$blockMethodName, null, $start);		// 08) store block into array		$this->blocks[$varName]	= $output['content'];		return $output['return'];	}	/* ***************************************************** INDEX GETTER ***************************************************** */	public function getBlocks()	{		return $this->blocks;	}	public function getLayout()	{		return $this->layout;	}	/* ***************************************************** REDIRECTS ***************************************************** */	/**	 *	 * Redirect to a different page by Ctl/Method	 * Make sure to encode the parameter values nicely	 */	protected function redirect($controller, $method = null, $params = array())	{		$args = /*$this->__url_encode_params*/implode('/', $params);		$link = DS.$controller;		$link.= ($method) ? (strlen($args) ? DS.$method.DS.$args : DS.$method) : '';		// if debug is on, do not redirect, but show the link instead		if (Settings::$debugLevel)		{			echo '<font color="red">Redirect Call: </font><a href="'.$link.'">'.$link.'</a>';		}		else		{			header('Location: '.$link);			exit();		}	}	/**	 *	 * Redirect to front page	 */	protected function redirectHome()	{		$this->redirect($GLOBALS['DEFAULT_CONTROLLER'], $GLOBALS['DEFAULT_METHOD']);	}	protected function redirectDelayedView($controller, $method, $params = array(), $view, $view_vars, $delay=5)	{		// Build Session Array		$params			= (is_array($params)) ? $params : array();		$info['url']	= DS.$controller.DS.$method.DS.implode('/', $params);		$info['delay']	= $delay;		$info['type']	= 'view';		$info['vars']	= $view_vars;		$info['view']	= $view;		Session::set('info_message_data', $info);		$this->redirect($GLOBALS['DEFAULT_INFO_MESSAGE_URL']);	}	protected function redirectDelayedInfo($controller, $method, $params = array(), $headline, $body, $delay=5)	{		// Build Session Array		$params			= (is_array($params)) ? $params : array();		$info['url']	= DS.$controller.DS.$method.DS.implode('/', $params);		$info['delay']	= $delay;		$info['type']	= 'info';		$info['head']	= $head;		$info['body']	= $body;		Session::set('info_message_data', $info);		$this->redirect($GLOBALS['DEFAULT_INFO_MESSAGE_URL']);	}}?>