<?phpclass Render{	/**	 *	 * Creates a renderable element from a given block	 * and returns the return code with the element	 * @param String $controllerName	 * @param String $methodName	 * @param Array $params	 */	public static function block($controllerName, $methodName, $params)	{		$ob_callback = (Settings::$debugLevel) ? null : 'ob_gzhandler';		// 01) Load in instantiate block		$block = Loader::loadBlock($controllerName);		if (  !class_exists(get_class($block)) )		{			Log::setError('Attach Block', '[Exist] Error in '.get_class($block).'->'.$controllerName.'('.implode(',', $params).')', debug_backtrace());			return;		}		// 03) execute the block		if ( ($ret = call_user_func_array(array($block, $methodName), $params)) === false)		{			Log::setError('Attach Block', '[Call] '.get_class($block).'->'.$methodName.'('.implode(',', $params).') returns FALSE', debug_backtrace());			return;		}		// 04) set view variables		foreach ($bVars	= $block->getVars() as $name => $value)		{			$$name = $value;		}		// 05) set view helpers		foreach ($bHelpers = $block->getHelpers() as $name => $helper)		{			$$name	= $helper;		}		// 05) get View		$view		= $block->getView();		$view_path	= BLOCK.DS.$controllerName.DS.'view'.DS.$block->getView();		// If the block is a form page and the form has been		// submitted, then the block does not necessarily need		// to load a view, but just return its state,		// so we only set a warning here and don't exit the script		if (!is_file($view_path))		{			Log::setWarn('BlockView', $view_path. ' does not exist');		}		else		{			// 06) RENDER			// Turn on output buffering			// TODO: handle debug mode, so that errors will be displayed!!			if ( !ob_start($ob_callback) )			{				ob_start();			}			@include($view_path);			$content = ob_get_contents();			// 07) Clean (erase) the output buffer and turn off output buffering			ob_end_clean();		}		// 09 Restore Header		//		// In case the block Controller did set a custom header e.g,		// header("Content-Type: image/png"); then it will still be active here		// so we have to restore it		// TODO:		//header('Content-type: text/html; charset=UTF-8');		// 10 Remove setted variables		//		// TODO: needs testing		//foreach ($bHelpers as $name => $value)		//{		//	unset($$name);		//}		//foreach ($bVars as $name => $value)		//{		//	unset($$name);		//}		return array('return' => $ret, 'content' => $content);	}	/**	 *	 * Renders a PageController View and returns	 * the rendered element	 * @param &Class $controller	 */	public static function view(&$controller)	{		$ob_callback	= (Settings::$debugLevel) ? null : 'ob_gzhandler';		$class			= get_class($controller);	// the name of the controller class		$vars			= $controller->getVars();		$helpers		= $controller->getHelpers();		$blocks			= $controller->getBlocks();		// TODO: standard view name is hardcoded!!!!		$view			= VIEW.DS.$class.DS.$controller->getView();//		$render_element = $view;		Log::setInfo('View', 'Using: '.$view);		// ------- Check if view, layout and skeleton do exist		if (!is_file($view))		{			Log::setError('View', 'view '.$view. ' does not exist');			Log::show();			exit;		}		// ------- Set Helpers (defined by controller)		foreach ($helpers as $name => $helper)		{			$$name	= $helper;		}		// ------- Set Variables (defined by controller)		foreach ($vars as $name => $var)		{			$$name = $var;		}		// ------- Set Blocks (defined by controller)		foreach ($blocks as $name => $block)		{			$$name = $block;		}		// -------- RENDER		if ( !ob_start($ob_callback) )		{			ob_start();		}		@include($view);		$content = ob_get_contents();		ob_end_clean();		return $content;	}	public static function layout(&$controller, $view)	{		$ob_callback	= (Settings::$debugLevel) ? null : 'ob_gzhandler';		include(LAYOUT.DS.'Layouts.php');		$layoutCtl		= new Layouts;		$layoutMethod	= $controller->getLayout();		// Only execute if an actual method has been specified		// Otherwise just take the default layout		if (!is_null($layoutMethod))		{			$layoutCtl->$layoutMethod();			$vars		= $layoutCtl->getVars();			$helpers	= $layoutCtl->getHelpers();			$blocks		= $layoutCtl->getBlocks();			// ------- Set Helpers (defined by controller)			foreach ($helpers as $name => $helper)			{				$$name	= $helper;			}			// ------- Set Variables (defined by controller)			foreach ($vars as $name => $var)			{				$$name = $var;			}			// ------- Set Blocks (defined by controller)			foreach ($blocks as $name => $block)			{				$$name = $block;			}		}		$viewVars	= $controller->getVars();	// also set the vars from the view		// TODO: standard view name is hardcoded!!!!		$layout		= LAYOUT.DS.'view'.DS.$layoutCtl->getView();		//		$render_element = $view;		Log::setInfo('Layout', 'Using: '.$layout);		// ------- Check if view, layout and skeleton do exist		if (!is_file($layout))		{			Log::setError('Layout', 'layout '.$layout. ' does not exist');			Log::show();			exit;		}		// ------- Set Variables (defined by controller)		foreach ($viewVars as $name => $var)		{			$$name = $var;		}		// -------- RENDER		if ( !ob_start($ob_callback) )		{			ob_start();		}		@include($layout);		$content = ob_get_contents();		ob_end_clean();		return $content;	}}